# $Id$
# yaal library configuration file.
# comments begin with `#' char and continue until end of line
# configuration file is divided into sections, each section
# begins with [section_name] mark, each option may be placed
# only in section it belongs to.
# option names are case insensitive
# in most cases option values are case insensitive also
# syntax for settings is:
# ^{option}{white}(['"]){value1 value2 ... valuen}\1{white}# comment$
# value may be surrounded by apostrophes or quotation marks
# one level of this surrounding is stripped
# we currently distinguish between four kind of value types:
# bool       - ( yes-flag | no-flag )
# yes-flag   - ( yes | true  | on  | enable  | 1 )
# no-flag    - ( no  | false | off | disable | 0 )
# char       - [a-z]
# int        - [0-9]+
# string     - [^ ].*
# enumerator - string chosen from predefined string set
# bit field  - (sub)set of given set of predefined strings
#
# example:
# log_sql true

### core BEGIN
[core]

# set_env
# type: command, default: N/A
# with set_env configuration command one can preset any environment
# variable, set_env can be used in all sections

# on_alloc_failure
# type: enumerator { ABORT, THROW }, default: ABORT
# on_alloc_failure determines library behavior on memory allocation failure
# valid memory allocation responses are: ABORT or THROW,
# where ABORT means terminate process immediately with SIGABRT,
# THROW means throw proper exception and possibly continue execution.
on_alloc_failure THROW

# exception_logging
# type: bool, default true
# exception_logging if set to true enables automatic logging information about exceptions.
exception_logging true

# log_level
# type: enumerator { DEBUG, INFO, NOTICE, WARNING, ERROR, CRITICAL, ALERT, EMERGENCY }, default: (NOTICE)
# log_level decides what types of information will be logged
log_level NOTICE

# write_timeout
# type: integer, default 4000
# write_timeout specifies how long non-blocking write operations should wait
# before they fail with timeout in case operation did not succeeded in given time.
write_timeout 4000

# thread_stack_size
# type: integer, default 0
# thread_stack_size forces stack size value (in bytes) for newly created threads,
# special value of 0 means to use current process stack size,
# in another words, 0 means do not alter stack size value
thread_stack_size 0

# resolve_hostnames
# type: bool, default true
# resolve_hostnames switch enables/disables resolving IP address into host names.
resolve_hostnames true

# ssl_key
# type: string, default: (empty)
# ssl_key is path to file with private ssl key
ssl_key "@SHAREDSTATEDIR@/yaal/keys/key"

# ssl_cert
# type: string, default: (empty)
# ssl_cert is path to file with ssl certificate
ssl_cert "@SHAREDSTATEDIR@/yaal/keys/pem"

# duration_unit_form
# type: enumerator { FULL, ABBREVIATED }, default: FULL
# Specify what should be default form for duration units used for conversion of durations to string.
# e.g: `3 seconds 765 microceconds` in `FULL` would be `3s 765Î¼s` if `ABBREVIATED`
duration_unit_form FULL

### core END

### tools BEGIN
[tools]

# ignore_signal_(SIGINT|SIGTSTP|SIGQUIT)
# type: bool, default: false
# this option tells if process should ignore received signal
ignore_signal_SIGINT false
ignore_signal_SIGTSTP false
ignore_signal_SIGQUIT false

# kill_grace_period
# type: integer, default 1000
# wait for that many milliseconds before killing interior
kill_grace_period 1000

# child_kill_grace_period
# type: integer, default 1000
# wait for that many milliseconds before killing child process
child_kill_grace_period 1000

# default_encoding
# type: string, default: UTF-8
# specify default character encoding used in text documents
default_encoding "UTF-8"

# huginn_max_call_stack_size
# type: interpreter, default: 1024
# default maximum call stack size for Huginn interpreter
huginn_max_call_stack_size 1024

# compression_level
# type: integer, default: -1
# valid levels [-1..9]
# sets default compression level for zlib library
compression_level -1

# compression_buffer_size
# type: integer, default 262144
# set size (in bytes) for memory buffer used for (de)compression in zlib library
compression_buffer_size 262144

# terminal configuration

# disable_XON
# type: bool, default: false
# disable XON(/XOFF) flow control on output,
# setting this to `true' disables C-s and C-q special handling
disable_XON true

# leave_ctrl_(c|z|\|q|s)
# type: bool, default: false
# this option decides if terminal should treat
# some key-press combinations in special way
# should CTRL-c typed by user be discarded by program?
# is CTRL-z ignored by process?
# true - means that terminal should NOT handle given keypress in special way
# false - means that terminal should install special handler
# for given keypress combination
leave_ctrl_c true
leave_ctrl_z true
leave_ctrl_\ true
leave_ctrl_q true
leave_ctrl_s true

# serial port configuration

# serial_device
# type: string, default: (system dependent)
# describes path to device
serial_device '/dev/@SERIAL_DEVICE@'

# serial_baudrate
# type: string, default: B115200
# this option sets serial line connection speed (baudrate)
# baudrate B115200 | B76800 | B57600 | B38400 | B28800
#          | B19200| B14400 | B9600 | B7200 | B4800 | B2400
serial_baudrate B115200

# serial_flags
# type: bit field,
# default: FLOW_CONTROL_HARDWARE BITS_PER_BYTE_8
# this option set various flags controlling serial connection behaviour
# valid bit names: FLOW_CONTROL_HARDWARE FLOW_CONTROL_SOFTWARE BITS_PER_BYTE_8
#             BITS_PER_BYTE_7 BITS_PER_BYTE_6 BITS_PER_BYTE_5 PARITY_CHECK
#             PARITY_ODD CR2NL ECHO CANONICAL STOP_BITS_1 STOP_BITS_2
serial_flags FLOW_CONTROL_HARDWARE BITS_PER_BYTE_8

### tools END

### console BEGIN
[console]

# esc_delay
# type: integer, default: 1000
# ESC key code is used to compose escape sequences
# terminal must distinguish if following codes make sequence
# or are separate key presses, to do that ncurses uses esc_delay
# environment variable which holds delay (milliseconds),
# after this time elapses next code is treated as separate character

esc_delay 0

# use_mouse
# type: enumerator { yes-flag, no-flag, auto }, default: auto
# Enable or disable use of mouse interface.
# When this option is set to yes-flag and mouse interface is not
# provided by operating system yaal library will not allow execution
# of any program that uses hconsole api.
# Setting this option to auto will enable mouse interface only
# if provided by operating system.
use_mouse auto

# latency
# type: integer, default: 1
# how long should application wait for user input before running
# idle-state operation, this value is specified in seconds
latency 1

# command_compose_character
# type: char, default: x
# what character should be used for composing commands,
# composing commands looks like this:
# user presses CTRL-`command_compose_character', which puts
# process into `command mode' and then
# before `command_compose_delay' passes user should
# press real command character, for example,
# if `command_compose_character' is x,
# then "program exit" command would look like:
# CTRL-x x
# note that in this case "exit" command is done by pressing `x'
# in command mode
command_compose_character 'x'

# command_compose_delay
# type: integer, default: 16
# how long hconsole-UI waits in `command mode' for user to type
# in real command
command_compose_delay 16

## colors BEGIN

# attribute_disabled, attribute_enabled, attribute_focused
# type: special(multi-value), default: (look below)
# color option syntax is:
# option foreground-label background-label foreground-data background-data
# color names are:
#	BLACK RED GREEN BROWN BLUE MAGENTA CYAN LIGHTGRAY GRAY BRIGHTRED BRIGHTGREEN
#	YELLOW BRIGHTBLUE BRIGHTMAGENTA BRIGHTCYAN WHITE

# colors common to all windows and controls

# screen background color
screen_background BLACK

# color attributes for disabled control
attribute_disabled GREEN GRAY LIGHTGRAY GRAY

# color attributes for enabled control
attribute_enabled BRIGHTGREEN GRAY WHITE GRAY

# color attributes for focused control
attribute_focused BRIGHTGREEN GRAY BLACK LIGHTGRAY

# special colors
attribute_statusbar WHITE BLACK LIGHTGRAY BLACK
attribute_search_highlight BLACK YELLOW BLACK BROWN

## colors END
### console END

### dbwrapper BEGIN
[dbwrapper]

# log SQL queries
log_sql true

### dbwrapper END

### mysql driver BEGIN
[mysql]

# set default character set for mysql driver
# client_character_set
# type: string, default: autodetect
client_character_set 'autodetect'

### mysql driver END

### oracle driver BEGIN
[oracle]

# name of the Oracle instance
# instance_name
# type: string, default: (installation dependent)
instance_name '@ORACLE_SID@'

### oracle driver END
### Local variables:
### eval:(conf-mode)
### End:
