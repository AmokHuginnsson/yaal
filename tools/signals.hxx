/*
---          `yaal' (c) 1978 by Marcin 'Amok' Konarski            ---

	signals.hxx - this file is integral part of `yaal' project.

  i.  You may not make any changes in Copyright information.
  ii. You must attach Copyright information to any part of every copy
      of this software.

Copyright:

 You can use this software free of charge and you can redistribute its binary
 package freely but:
  1. You are not allowed to use any part of sources of this software.
  2. You are not allowed to redistribute any part of sources of this software.
  3. You are not allowed to reverse engineer this software.
  4. If you want to distribute a binary package of this software you cannot
     demand any fees for it. You cannot even demand
     a return of cost of the media or distribution (CD for example).
  5. You cannot involve this software in any commercial activity (for example
     as a free add-on to paid software or newspaper).
 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE. Use it at your own risk.
*/

#ifndef YAAL_TOOLS_SIGHAND_HXX_INCLUDED
#define YAAL_TOOLS_SIGHAND_HXX_INCLUDED 1

#include "hcore/hpointer.hxx"
#include "hcore/hchunk.hxx"
#include "hcore/hmultimap.hxx"
#include "hcore/hlist.hxx"
#include "hcore/hthread.hxx"
#include "hcore/hsingleton.hxx"

namespace yaal {

namespace tools
{

/*! \brief Posix signal manager.
 *
 * Instance of HSignalService class is a global object that handles
 * dispatching of operating system level signals.
 */
class M_YAAL_TOOLS_PUBLIC_API HSignalService : public yaal::hcore::HSingleton<HSignalService> {
public:
	typedef yaal::hcore::HSingleton<HSignalService> base_type;
	typedef HSignalService this_type;
	typedef int (*raw_handler_t)( int );
	typedef yaal::hcore::HBoundCall<int ( int )> handler_t;
	typedef yaal::hcore::HPair<handler_t, void const*> handler_info_t;
private:
	typedef yaal::hcore::HMultiMap<int, handler_info_t> handlers_t;
	typedef handlers_t::value_list_t handler_list_t;
	typedef handlers_t::value_list_ptr_t handler_list_ptr_t;
	static int _exitStatus;
	bool _loop;
	yaal::hcore::HChunk _catch;
	yaal::hcore::HChunk _block;
	yaal::hcore::HThread _thread;
	yaal::hcore::HMutex _mutex;
	handlers_t _handlers;
public:
	static int _killGracePeriod;
	void register_handler( int, handler_t, void const* = NULL );
	void call_handler( int );
	void flush_handlers( void const* );
	void reset_signal( int );
	void stop( void	);
private:
	HSignalService( void );
	~HSignalService( void );
	void* run( void );
	void catch_signal( int );
	void block_signal( int );
	static int life_time( int );
	void schedule_exit( int );
	static void exit( int ) __attribute__(( __noreturn__ ));
	friend class yaal::hcore::HSingleton<HSignalService>;
	friend class yaal::hcore::HDestructor<HSignalService>;
};

/*! \brief Exception generated by HSignalService.
 */
typedef yaal::hcore::HExceptionT<HSignalService> HSignalServiceException;

}

}

#endif /* #ifndef YAAL_TOOLS_SIGHAND_HXX_INCLUDED */

