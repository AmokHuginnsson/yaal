*** yaal documentation ***

* Supported platforms:

** Hardware:
  - amd64 aka x64.
  - x86 aka i386 (soon to be deprecated).
	- armhf (32 bit arm architecture).

** Software:
  - Debian (latest development branch, currently `unstable' aka `Sid', and always latest stable release)
  - Ubuntu (latest development branch and latest stable release, currently 16.04 and 18.04 respectively)
  - CentOS (latest stable release, currently 7)
  - Fedora (latest stable release, currently 26)
  - FreeBSD (latest stable release, currently 11.1-RELEASE)
  - Oracle Solaris (latest stable release, currently 11.3)
  - Darwin (latest stable release, 14.5.0)
  - Windows 7 SP1 with Cygwin (latest available cygwin release, currently 2.5.2)
  - Windows 7 SP1 with Visual Studio (latest available Visual Studio release, currently 2015)
  - Raspbian (latest stable release, currently 9.x (aka Stretch))

[For more detailed information regarding platform support
please look into HTML documentation.]

If your platform is not on above list, it is very likely that yaal
will not compile/link/work.

Yaal is meant to be compatible only with systems at
bleeding edge of development stage. Above statement means:
We do not maintain backward compatibility of any kind,
if you want increase your yaal integration success probability
please use newest development (build) tools available,
especially C++ compiler and GNU make tool.

You are welcome to port yaal to your platform and send us a patch.

IMPORTANT:
Yaal containers, algorithms and functional programming paradigm helpers
implementation have been created with sole educational purposes in mind.
If you need any of those, do NOT use yaal implementation,
use STL instead.

Yaal smart pointers, yaal::hcore::call() (as in std::bind()),
program options handling and variant implementation have been created
with sole educational purposes in mind.
If you need any of those, do NOT use yaal implementation,
use stl or Boost instead.

