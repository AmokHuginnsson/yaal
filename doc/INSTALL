*** yaal documentation - installation instructions ***

First of all, if you did not read READ.ME.FIRST.OR.DIE go there now.

* System requirements.

  required libraries:
    - pthread (libpthread)
    - ssl (libssl)
    - rt (librt)
    - xml (libxml2)
    - xslt (libxslt1)
    - dl (libdl)
    - z (zlib)
    - ncurses (ncurses)

  optional libraries:
    - SQLite3
    - PostGreSQL
    - MySQL
    - Firebird
    - OCI
    - gpm

  required tools:
    - g++ or clang++
  and:
    - autoreconf
    - autoheader
    - autoconf
    - libtool
    - GNU make
  or:
    - cmake

  other:
    - lots of grace and patience

* Installation process.

  1. Create new (possibly persistent) environment variables (see your shell documentation)
     three named: PREFIX, SYSCONFDIR and LOCALSTATEDIR
     and set its values to desired installation destination directories,
     another named DEFAULT_TARGET and set to desired build mode, a `debug' value is advised.
  2. Go to sources directory and type `make'.
  3. (Required only once.) Still in yaal sources directory type `make install-environment'.
  4. Still in yaal sources directory type `make install'.
  5. Spawn new shell instance to get yaal installed headers and libraries visible.

** Installation process details.

First we make sure we start the procedure from your home directory.

      $ cd

In next step you shall add a special initialization code to your shell startup script file.
This code will add new environment variables to your shell sessions:

  PREFIX         - your main installation path,
  SYSCONFDIR     - directory where global host configuration files are stored,
  LOCALSTATEDIR  - a directory where data files which the programs modify while
                   they run are stored,
  DEFAULT_TARGET - which configures default build type.

In case of our example ${PREFIX} will be the `usr' directory located directly in your home
directory.

    # for bash shell

      $ echo 'export PREFIX="${HOME}/usr/"'         >> ${HOME}/.bashrc
      $ echo 'export SYSCONFDIR="${HOME}/etc/conf"' >> ${HOME}/.bashrc
      $ echo 'export LOCALSTATEDIR="${HOME}/var"'   >> ${HOME}/.bashrc
      $ echo 'export DEFAULT_TARGET="debug"'        >> ${HOME}/.bashrc

    # for zsh shell

      $ echo 'export PREFIX="${HOME}/usr/"'         >> ${HOME}/.zshrc
      $ echo 'export SYSCONFDIR="${HOME}/etc/conf"' >> ${HOME}/.zshrc
      $ echo 'export LOCALSTATEDIR="${HOME}/var"'   >> ${HOME}/.zshrc
      $ echo 'export DEFAULT_TARGET="debug"'        >> ${HOME}/.zshrc

    # or, for tcsh shell

      % echo 'setenv PREFIX "${home}/usr/"'         >> ${HOME}/.tcshrc
      % echo 'setenv SYSCONFDIR "${home}/etc/conf"' >> ${HOME}/.tcshrc
      % echo 'setenv LOCALSTATEDIR "${HOME}/var"'   >> ${HOME}/.tcshrc
      % echo 'setenv DEFAULT_TARGET "debug"'        >> ${HOME}/.tcshrc

Once required changes to your shell startup scripts are in place you shall cause your shell
to load its initialization file and through that to include newly added,
persistent environment variables to currently running shell session.

    # for bash shell

      $ . "${HOME}/.bashrc"

    # for zsh shell

      $ . "${HOME}/.zshrc"

    # or, for tcsh shell

      % source "${HOME}/.tcshrc"

Now you are expected to enter a directory with `yaal' sources.

      $ cd "${HOME}/src/yaal/"

Next, you run build of `yaal' sources.

      $ make

By default `yaal' is build into shared (aka dynamically loaded) libraries,
moreover one does not need root privileges to install `yaal' libraries.
All installed files can be stored in your home directory.
Because you will install yaal headers outside of default header directory location
(like /usr/include or /usr/local/include), and you will install binary libraries
outside of default directory location (like /usr/lib or /usr/local/lib) you will
need to tell your compiler (GCC or clang) and operating system dynamic linker (ld-so)
where to find these files. To do that you will need to persistently add four
special variables (C_INCLUDE_PATH, CPLUS_INCLUDE_PATH, LIBRARY_PATH, LD_LIBRARY_PATH)
to your's shell environment. In this step you shall do precisely that.

!! This step is required only once !!

      $ make install-environment

In next step you will install `yaal' headers and binary libraries into correct paths:
headers into ${PREFIX}/include, libraries into ${PREFIX}/lib,
configuration into ${SYSCONFDIR}.

      $ make install

In another step we create directory for OpenSSL keys used by yaal,
we enter that directory, and then we create private OpenSSL key
for yaal SSL related routines, finally we create SSL root certificate.

!! This step is required only once !!

      $ mkdir -p "${HOME}/var/db/keys"
      $ cd "${HOME}/var/db/keys"
      $ openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 -out yaal.key
      $ openssl req -x509 -new -key yaal.key -out yaal.pem -days 3652

Next, spawn new shell and you are done!

Please observe that we assumed you downloaded `yaal' sources
into "${HOME}/src/yaal' directory, if not please modify paths in this procedure
accordingly.

* System configuration.

This part if totally optional.
It can be used as handbook by developers who want to try and play with
yaal but do not want to spend time learning how to setup some
obscure system facilities.

** Configuration of databases.

*** PostgreSQL.

Run:

  pg_dropcluster --stop 9.5 main
  pg_createcluster --lc-ctype pl_PL.ISO-8859-2 --lc-collate pl_PL.ISO-8859-2 --lc-time en_DK --encoding latin2 --start 9.5 main

Add:

	listen_addresses=''

to postgresql.conf.

Edit pg_hba.conf and disable all authentication methods but:

  local all postgres peer
  local all all md5

Restart server.
Add user named `root' as database administrator.
Log in as system user `postgres', connect to database with:

  psql template1

While connected do database server run query:

  CREATE USER root SUPERUSER CREATEDB CREATEROLE REPLICATION ENCRYPTED PASSWORD '<your_password>';

*** MySQL.

Add `skip-networking' option in `[mysqld]' section of /etc/mysql/my.cnf file.
Restart server.

*** Firebird.

Edit /etc/firebird/2.5/firebird.conf and setup database access:

  DatabaseAccess = Restrict /var/lib/firebird/2.5/data

and disable legacy hash:

  LegacyHash = 0

Next, setup administrative user for database and user creation:

  gsec -user sysdba -password <your_password>

!!! Note: If you cannot login with administrator password you believe you have set during installation,
try using default Firebird sysdba password 'masterkey' instead.

in gsec tool add new user:

  GSEC> add root -pw <your_password> -fname Database -mname System -lname Administrator -admin yes

and you are good to go.

* Testing the installation.

`yaal' has its own test suite that is a separate application.
To confirm that `yaal' installation was in fact successful you will need
to get, build and run this suite.

The suite is called `tress' and can be obtained from git repository.

$ git clone https://codestation.org/repo/tress.git tress

After you get `tress' sources look for README file there.

Good luck!

