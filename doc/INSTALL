*** yaal documentation - installation instructions ***

First of all, if you did not read READ.ME.FIRST.OR.DIE go there now.

* System requirements.

  required libraries:
    - pthread (libpthread)
    - ssl (libssl)
    - rt (librt)
    - xml (libxml2)
    - xslt (libxslt1)
    - dl (libdl)
    - z (zlib)
    - ncurses (ncurses)

  optional libraries:
    - SQLite3
    - PostGreSQL
    - MySQL
    - Firebird
    - OCI
    - gpm

  required tools:
    - autoreconf
    - autoheader
    - autoconf
    - libtool
    - GNU make
    - g++

  other:
    - lots of grace and patience

* Installation process.

  1. Create new (possibly persistent) environment variables (see your shell documentation)
     one named PREFIX and set its value to desired installation destination directory,
     another named DEFAULT_TARGET and set to desired build mode, a `debug' value is advised.
  2. Go to sources directory and type `make', i.e:.
  3. (Required only once.) Still in yaal sources directory type `make install-environment'.
  4. Still in yaal sources directory type `make install'.
  5. Spawn new shell instance to get yaal installed headers and libraries visible.

* Details:

First we make sure we start the procedure from your home directory.

      $ cd

In next step you shall add a special initialization code to your shell startup script file.
This code will add new environment variables to your shell sessions,
variable named PREFIX with value representing path to some directory
(in case of our example it will be the `usr' directory located directly in your home
directory).

    # for bash or zsh shells

      $ echo 'export PREFIX="${HOME}/usr/"' >> ${HOME}/.bashrc

    # or, for tcsh shell

      % echo 'setenv PREFIX "${home}/usr/"' >> ${HOME}/.tcshrc

Similarly to previous step now you will set new persistent environment variable
named SYSCONFDIR.

    # for bash or zsh shells

      $ echo 'export SYSCONFDIR="${HOME}/etc/conf"' >> ${HOME}/.bashrc

    # or, for tcsh shell

      % echo 'setenv SYSCONFDIR "${home}/etc/conf"' >> ${HOME}/.tcshrc

Finally, in last step of preparing shell environment variables you will set one more
new persistent environment variable named DEFAULT_TARGET.

    # for bash or zsh shells

      $ echo 'export DEFAULT_TARGET="debug"' >> ${HOME}/.bashrc

    # or, for tcsh shell

      $ echo 'setenv DEFAULT_TARGET "debug"' >> ${HOME}/.tcshrc

Once required changes to your shell starup scripts are in plave you shall cause your shell
to load its initialization file and through that to include newly added,
persistent environment variables to currently running shell session.

    # for bash or zsh shells

      $ . "${HOME}/.bashrc"

    # or, for tcsh shell

      $ source "${HOME}/.tcshrc"

Now you are expected to enter a directory with `yaal' sources.

      $ cd "${HOME}/src/yaal/"

Next, you run build of `yaal' sources.

      $ make

By default `yaal' is build into shared (aka dynamically loaded) libraries,
moreover one does not need root privileges to install `yaal' libraries.
All installed files can be stored in your home directory.
Because you will install yaal headers outside of default header directory location 
(like /usr/include or /usr/local/include), and you will install binary libraries
outside of default directory location (like /usr/lib or /usr/local/lib) you will
need to tell your compiler (GCC) and operating system dynamic linker (ld-so)
where to find these files. To do that you will need to persistently add four
special variables (C_INCLUDE_PATH, CPLUS_INCLUDE_PATH, LIBRARY_PATH, LD_LIBRARY_PATH)
to your environment. In this step you shall do precisely that.

!! This step is required only once !!

      $ make install-environment

In next step you will install `yaal' headers and binary libraries into correct paths:
headers into ${PREFIX}/include, libraries into ${PREFIX}/lib,
configuration into ${SYSCONFDIR}.

      $ make install

In another step we create directory for OpenSSL keys used by yaal,
we enter that directory, and then we create private OpenSSL key
for yaal SSL related routines, finally we create SSL root certificate.

!! This step is required only once !!

      $ mkdir -p "${HOME}/var/db/keys"
      $ cd "${HOME}/var/db/keys"
      $ openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 -out yaal.key
      $ openssl req -x509 -new -key yaal.key -out yaal.pem -days 3652

Next, spawn new shell and you are done!

Please observe that we assumed you downloaded `yaal' sources
into "${HOME}/src/yaal' directory, if not please modify paths in this procedure
accordingly.

* Testing the installation.

`yaal' has its own test suite that is a separate application.
To confirm that `yaal' installation was in fact successful you will need
to get, build and run this suite.

The suite is called `tress' and can be obtained from git repository.

$ git clone https://codestation.org/repo/tress.git tress

After you get `tress' sources look for README file there.

Good luck!

