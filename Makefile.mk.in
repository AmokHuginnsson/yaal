# $Id$
#
#---        `yaal' (c) 1978 by Marcin 'Amok' Konarski             ---
#
#	Makefile.mk.in - this file is integral part of `yaal' project.
#
#	i.  You may not make any changes in Copyright information.
#	ii. You must attach Copyright information to any part of every copy
#	    of this software.
#
#Copyright:
#
# You are free to use this program as is, you can redistribute binary
# package freely but:
#  1. You cannot use any part of sources of this software.
#  2. You cannot redistribute any part of sources of this software.
#  3. No reverse engineering is allowed.
#  4. If you want redistribute binary package you cannot demand any fees
#     for this software.
#     You cannot even demand cost of the carrier (CD for example).
#  5. You cannot include it to any commercial enterprise (for example
#     as a free add-on to payed software or payed newspaper).
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. Use it at your own risk.

$(eval DIR_ROOT?=$(subst /Makefile.mk.in,,$(lastword $(realpath $(foreach DIR,$(subst /, ,$(CURDIR)), $(eval DIR_ROOT_TEST=$(DIR_ROOT_TEST)/$(DIR))$(DIR_ROOT_TEST)/Makefile.mk.in)))))
PRJNAME        = yaal
LIB_NAME       = $(PRJNAME)
VERSION        = 0
SUBVERSION     = 0
EXTRAVERSION   = 36
LIB_VERSION    = $(VERSION).$(SUBVERSION).$(EXTRAVERSION)
COMPONENTS     = hcore tools dbwrapper hconsole hdata
DRIVERS        = @DO_ORACLE_DRIVER@ @DO_FIREBIRD_DRIVER@ @DO_MYSQL_DRIVER@ @DO_POSTGRESQL_DRIVER@ @DO_SQLITE3_DRIVER@
prefix         = @prefix@
exec_prefix    = @exec_prefix@
DIR_SYSCONF    = $(DESTDIR)@sysconfdir@
DIR_BIN        = $(DESTDIR)@bindir@
DIR_LIB        = $(DESTDIR)@libdir@
DIR_LOCALSTATE = $(DESTDIR)@localstatedir@
DIR_HEADERS    = $(DESTDIR)@includedir@
DIR_SHARE      = $(DESTDIR)@datarootdir@
LIB_PREFIX     = @LIB_PREFIX@
LIB_EXT        = @LIB_EXT@
CXX            = @CXX@
MKDIR_P        = @MKDIR_P@
INSTALL        = @INSTALL@
RANLIB         = @RANLIB@
GITID          = @GITID@
CTAGS          = @CTAGS@
GTAGS          = @GTAGS@
MAIN_LIB_HEADER= include/$(LIB_NAME)/$(LIB_NAME).hxx
SSL_KEYS_DIR   = db/$(LIB_NAME)/keys/
SSL_KEYS       = $(SSL_KEYS_DIR)/key $(SSL_KEYS_DIR)/pem
DIRS           = $(DIR_BUILD) $(SSL_KEYS_DIR)
DO_@DO_TARGET@=1
include $(DIR_ROOT)/_aux/mk/00_sanity.mk
include $(DIR_ROOT)/_aux/mk/10_basic.mk
include $(DIR_ROOT)/_aux/mk/20_term.mk
include $(DIR_ROOT)/_aux/mk/30_suffix.mk
include $(DIR_ROOT)/_aux/mk/40_commit-id.mk
include $(DIR_ROOT)/_aux/mk/50_wrapper.mk
include $(DIR_ROOT)/_aux/mk/60_flags.mk
EXTRA_COMPILER_DEBUG_FLAGS=@EXTRA_COMPILER_DEBUG_FLAGS@
EXTRA_COMPILER_OPTIMIZATION_FLAGS=@EXTRA_COMPILER_OPTIMIZATION_FLAGS@
EXTRA_INCLUDE_PATHS=@EXTRA_INCLUDE_PATHS@
EXTRA_LIBRARY_PATHS=@EXTRA_LIBRARY_PATHS@
override EXTRA_CXXFLAGS+=@EXTRA_CXXFLAGS@
override EXTRA_LXXFLAGS+=@EXTRA_LXXFLAGS@
override CXXFLAGS+= -D__YAAL_BUILD__ @DEFS@ @PCRE_CFLAGS@ @XML2_CFLAGS@ @XSLT_CFLAGS@ @EXSLT_CFLAGS@
override LXXFLAGS+= -L. -shared @YAAL_LXXFLAGS@

include $(DIR_ROOT)/_aux/mk/80_func.mk

$(foreach IT,$(COMPONENTS),$(eval $(call PREPARE_VARIABLES,$(IT),$(IT),$(LIB_NAME)_)))
SRCS := $(filter-out %_driver.$(SS),$(SRCS))
OBJS_dbwrapper := $(filter-out %_driver.$(OS),$(OBJS_dbwrapper))
$(foreach IT,$(DRIVERS),$(eval $(call CONFIGURE_DRIVER,$(IT),$(LIB_NAME)_)))

# Solaris is seriously broken operating system.
LIBS_BASE      = -lc
HCORE_LIBS     = @HCORE_LIBS@ @PCRE_LIBS@
TOOLS_LIBS     = @TOOLS_LIBS@ @XML2_LIBS@ @XSLT_LIBS@ @EXSLT_LIBS@

LIBS_hcore     = $(LIBS_BASE) -lssl -lcrypto $(HCORE_LIBS)
DEPS_tools     = $(TARGET_hcore)
LIBS_tools     = $(LIBS_BASE) -l$(LIB_NAME)_hcore$(LIB_INFIX) -lpthread -lz @RDYNAMIC@ $(HCORE_LIBS) $(TOOLS_LIBS) $(HCORE_LIBS)
DEPS_dbwrapper = $(TARGET_hcore) $(TARGET_tools)
LIBS_dbwrapper = $(LIBS_BASE) -l$(LIB_NAME)_tools$(LIB_INFIX) -l$(LIB_NAME)_hcore$(LIB_INFIX) $(HCORE_LIBS)
DEPS_hconsole  = $(TARGET_hcore) $(TARGET_tools)
LIBS_hconsole  = $(LIBS_BASE) -l$(LIB_NAME)_tools$(LIB_INFIX) -l$(LIB_NAME)_hcore$(LIB_INFIX) -lncurses @HCONSOLE_LIBS@ $(HCORE_LIBS)
DEPS_hdata     = $(TARGET_dbwrapper) $(TARGET_hconsole)
LIBS_hdata     = $(LIBS_BASE) -l$(LIB_NAME)_hconsole$(LIB_INFIX) -l$(LIB_NAME)_dbwrapper$(LIB_INFIX) -l$(LIB_NAME)_tools$(LIB_INFIX) -l$(LIB_NAME)_hcore$(LIB_INFIX) -lncurses $(HCORE_LIBS)

DEPS_sqlite3_driver    = $(TARGET_hcore)
LIBS_sqlite3_driver    = $(LIBS_BASE) -lsqlite3 $(if $(findstring dll,$(LIB_EXT)),-l$(LIB_NAME)_hcore$(LIB_INFIX))
DEPS_postgresql_driver = $(TARGET_hcore)
LIBS_postgresql_driver = $(LIBS_BASE) -lpq $(if $(findstring dll,$(LIB_EXT)),-l$(LIB_NAME)_hcore$(LIB_INFIX) -l$(LIB_NAME)_tools$(LIB_INFIX))
DEPS_mysql_driver      = $(TARGET_hcore)
LIBS_mysql_driver      = @MYSQLCLIENT_LIBRARY@ $(if $(findstring dll,$(LIB_EXT)),-l$(LIB_NAME)_hcore$(LIB_INFIX))
DEPS_firebird_driver   = $(TARGET_hcore)
LIBS_firebird_driver   = $(LIBS_BASE) -lfbclient $(if $(findstring dll,$(LIB_EXT)),-l$(LIB_NAME)_hcore$(LIB_INFIX))
DEPS_oracle_driver     = $(TARGET_hcore)
LIBS_oracle_driver     = $(LIBS_BASE) -lclntsh $(if $(findstring dll,$(LIB_EXT)),-l$(LIB_NAME)_hcore$(LIB_INFIX) -l$(LIB_NAME)_tools$(LIB_INFIX))

-include $(DIR_ROOT)/local.mk

#-------------------------------------------------------------------

#	this is "rule" for linking libs

.SECONDEXPANSION:

$(LIB_PREFIX)$(LIB_NAME)_%$(LIB_INFIX).$(LIB_SUFFIX): $$(OBJS_$$(*)) $$(DEPS_$$(*))
	@$(call msg,printf "%b" "Linking \`$(@)' ... $(BOLD)$(RED)";) \
	$(call invoke,$(LXX) $(LIBS) $(LXXFLAGS) $(if $(findstring driver,$(@)),,@LXXFLAGS_NO_UNDEFINED@) @SONAME_FLAG@ -o $(@) \
			@START_GROUP@ $(OBJS_$(*)) @END_GROUP@ $(LIBS_$(*)) 2>&1 | tee -a make.log) ; $(call msg, printf "%b" "$(RS)";)
	@test -f $(@) || exit 1
ifeq ($(LIB_PREFIX),lib)
	@$(call invoke,$(AR) $(ARFLAGS) lib$(LIB_NAME)_$(*)$(LIB_INFIX).$(LIB_ARCHIVE_SUFFIX) $(OBJS_$(*)) | tee -a make.log ) ; \
	$(call invoke,$(RANLIB) lib$(LIB_NAME)_$(*)$(LIB_INFIX).$(LIB_ARCHIVE_SUFFIX))
endif # just to allow shared linking during the build
	@$(call invoke,ln -sf lib$(LIB_NAME)_$(*)$(LIB_INFIX).so.$(RELEASE) lib$(LIB_NAME)_$(*)$(LIB_INFIX).so.$(VERSION).$(SUBVERSION)) && \
	$(call invoke,ln -sf lib$(LIB_NAME)_$(*)$(LIB_INFIX).so.$(VERSION).$(SUBVERSION) lib$(LIB_NAME)_$(*)$(LIB_INFIX).$(LIB_EXT)) \
	$(call msg,&& printf "%b$(NL)" "done.$(CL)")

define INSTALL_TARGET
	$(call msg,printf "%b" "Installing \`$(LIB_PREFIX)$(LIB_NAME)_$(1)$(LIB_INFIX).$(LIB_SUFFIX)' ... $(BOLD)$(RED)";) \
	$(call invoke,$(INSTALL) $(LIB_PREFIX)$(LIB_NAME)_$(1)$(LIB_INFIX).$(LIB_SUFFIX) lib$(LIB_NAME)_$(1)$(LIB_INFIX).$(LIB_ARCHIVE_SUFFIX) $(DIR_LIB)/ ) ; \
	$(call msg, printf "%b" "$(RS)" && ) \
	if [ "x$(LIB_PREFIX)" = "xlib" ] ; then \
		$(call invoke,ln -sf lib$(LIB_NAME)_$(1)$(LIB_INFIX).so.$(RELEASE) $(DIR_LIB)/lib$(LIB_NAME)_$(1)$(LIB_INFIX).so.$(VERSION).$(SUBVERSION) ) && \
		$(call invoke,ln -sf lib$(LIB_NAME)_$(1)$(LIB_INFIX).so.$(VERSION).$(SUBVERSION) $(DIR_LIB)/lib$(LIB_NAME)_$(1)$(LIB_INFIX).so.$(VERSION) ) && \
		$(call invoke,ln -sf lib$(LIB_NAME)_$(1)$(LIB_INFIX).so.$(VERSION) $(DIR_LIB)/lib$(LIB_NAME)_$(1)$(LIB_INFIX).$(LIB_EXT) ) ; \
	fi && \
	$(call msg,printf "%b$(NL)" "done.$(CL)" && )
endef

define UNINSTALL_TARGET
	$(call msg,printf "%b" "Uninstalling \`$(LIB_PREFIX)$(LIB_NAME)_$(1)$(LIB_INFIX).$(LIB_SUFFIX)' ... $(BOLD)$(RED)";) \
	$(call invoke,/bin/rm -f $(DIR_LIB)/$(LIB_PREFIX)$(LIB_NAME)_$(1)$(LIB_INFIX).$(LIB_SUFFIX) $(DIR_LIB)/lib$(LIB_NAME)_$(1)$(LIB_INFIX).$(LIB_ARCHIVE_SUFFIX) ) ; \
	$(call msg, printf "%b" "$(RS)" && ) \
	if [ "x$(LIB_PREFIX)" = "xlib" ] ; then \
		$(call invoke,/bin/rm -f $(DIR_LIB)/lib$(LIB_NAME)_$(1)$(LIB_INFIX).so.$(VERSION).$(SUBVERSION) \
			$(DIR_LIB)/lib$(LIB_NAME)_$(1)$(LIB_INFIX).so.$(VERSION) $(DIR_LIB)/lib$(LIB_NAME)_$(1)$(LIB_INFIX).$(LIB_EXT) ) ; \
	fi && \
	$(call msg,printf "%b$(NL)" "done.$(CL)" && )
endef

include $(DIR_ROOT)/_aux/mk/c0_implicit-compile.mk
#------------------------------------------------------------------------

include $(DIR_ROOT)/_aux/mk/d0_target-default.mk

#phony targets
.PHONY: all bin clean clean-dep cov coverage-stats debug dep distclean doc install install-environment mrproper relassert reldeb release prepare-coverage-baseline prof purge purge-local static stats test uninstall

$(TARGET): $(DIRS) $(TARGETS) $(firstword $(SSL_KEYS)) $(MAIN_LIB_HEADER)

all: $(TARGET)

$(foreach IT,$(DIRS),$(eval $(call MAKE_DIR,$(IT))))

environment: $(DIRS)

install: all
	@$(call invoke,$(MKDIR_P) $(DIR_LIB) $(DIR_PKGCONFIG) $(DIR_SYSCONF) && ) \
	$(foreach IT,$(COMPONENTS) $(addsuffix _driver,$(DRIVERS)),$(call INSTALL_TARGET,$(IT))) \
	$(call invoke,$(INSTALL) -m644 $(PRJNAME).pc $(DIR_PKGCONFIG)/ && ) \
	$(call invoke,$(INSTALL) -m644 $(PRJNAME)rc $(DIR_SYSCONF)/ && ) \
	$(call invoke,$(INSTALL) -d -m755 $(DIR_DOC) && $(INSTALL) -m644 $(DIR_ROOT)/doc/* $(DIR_DOC)/ && ) \
	$(call invoke,$(INSTALL) -d -m755 $(DIR_SHARE)/$(PRJNAME)/ && ) \
	$(call invoke,tar cf - -C $(DIR_ROOT) -X $(DIR_ROOT)/_aux/exclude _aux | tar xpf - -C $(DIR_SHARE)/$(PRJNAME) && ) \
	$(call invoke,$(INSTALL) -d -m755 $(DIR_HEADERS) && /bin/cp -fRp $(DIR_BUILD)/include/$(LIB_NAME) $(DIR_HEADERS)/ && ) \
	$(call invoke,$(INSTALL) -d -m755 $(DIR_LOCALSTATE)/db/$(LIB_NAME) && /bin/cp -fRp $(DIR_BUILD)/db $(DIR_LOCALSTATE)/ && ) \
	$(call msg,printf "%b" "making cache ... " && ) \
	printf "%b\n" $(DIR_LIB) > $(DIR_LIB)/ld.so.conf && \
	/bin/cp -f $(DIR_ROOT)/_aux/mkcache $(DIR_LIB) && \
	cd $(DIR_LIB) && $(DIR_LIB)/mkcache --lib-dir=$(DIR_LIB) \
	$(call msg,&& printf "%b$(NL)" "done.$(CL)")

uninstall:
	@$(call msg,printf "%b" "Uninstalling the library ... " && ) \
	$(foreach IT,$(COMPONENTS) $(addsuffix _driver,$(DRIVERS)),$(call UNINSTALL_TARGET,$(IT))) \
	$(call invoke,/bin/rm -f $(DIR_PKGCONFIG)/$(PRJNAME).pc && ) \
	$(call invoke,/bin/rm -f $(DIR_SYSCONF)/$(PRJNAME)rc && ) \
	$(call invoke,/bin/rm -fr $(DIR_HEADERS)/$(LIB_NAME) && ) \
	$(call invoke,/bin/rm -fr $(DIR_LOCALSTATE)/db/$(LIB_NAME)) \
	$(call msg,&& printf "%b$(NL)" "done.$(CL)")

install-environment:
	@cd $(DIR_ROOT) && ./_aux/msh $(DESTDIR)$(prefix)

$(MAIN_LIB_HEADER): $(HDRS) $(DIR_BUILD)/config.hxx
	@printf "%b" "Making headers ... " && \
	$(call invoke,$(DIR_ROOT)/_aux/mkheaders --lib-name=$(LIB_NAME) --lib-version=$(LIB_VERSION) --dir-root="$(DIR_ROOT)" --dir-build="$(DIR_BUILD)" --headers="$(HDRS)" && ) \
	printf "%b$(NL)" "done.$(CL)$(BOLD)" && \
	printf "%b\n" "All OK!$(RS)";

$(SSL_KEYS): $(SSL_KEYS_DIR)
	@printf "%b" "Making SSL keys ... " && \
	$(call invoke,$(DIR_ROOT)/_aux/gen-keys $(DIR_BUILD)/$(dir $(@))) && \
	printf "%b$(NL)" "done.$(CL)$(BOLD)"

clean-dep:
	@$(FIND) . -name '*.$(DS)' | xargs /bin/rm -f

clean: clean-dep
	@/bin/rm -f $(OBJS); \
	sh -c '. $(DIR_ROOT)/_aux/clean-lib.sh && clean .'

mrproper: clean
	@printf "%b" "Purging ... "; \
	/bin/rm -rf include make.log; \
	$(FIND) . \( -name .git -prune -name 'tags' -o -name '.depend' -o -name '*.a' \) -a ! -name .git \
| xargs /bin/rm -f; \
	printf "%b\n" "done."

purge-local:
	@/bin/rm -f $(DIR_ROOT)/dropprivs $(DIR_ROOT)/debian

include $(DIR_ROOT)/_aux/mk/e0_target-tools.mk

doc: $(DIR_ROOT)/build/doc/html/doxygen.css

$(DIR_ROOT)/build/doc/html/doxygen.css: $(SRCS) $(HDRS)
	@cd $(DIR_ROOT) && doxygen _aux/doxygenrc 2>&1 | grep 'is not documented'; \
	cat $(DIR_ROOT)/doc/doxygen.css >> $(DIR_ROOT)/build/doc/html/doxygen.css

install-doc: $(DIR_ROOT)/build/doc/html/doxygen.css
	@$(call invoke,$(MKDIR_P) $(DIR_DOC) && /bin/cp -fRp $(DIR_ROOT)/build/doc/html $(DIR_DOC) )

uninstall-doc:
	@$(call invoke,/bin/rm -rf $(DIR_DOC))

stats:
	@cd $(DIR_ROOT) && ./_aux/stats $(DIR_ROOT)

test: all
	@if [ -d $(DIR_ROOT)/../tress ] ; then \
		cd $(DIR_ROOT)/../tress && \
		unset DIR_ROOT CXXFLAGS CPPFLAGS CFLAGS LXXFLAGS && \
		env EXTRA_CXXFLAGS="-isystem $(DIR_BUILD)/include -I$(DIR_BUILD)/include" \
				EXTRA_LXXFLAGS="-L$(DIR_BUILD)" \
				LD_LIBRARY_PATH="$(subst $( ),:,$(subst -L,,$(EXTRA_LIBRARY_PATHS))):$(DIR_BUILD)" \
				SYSCONFDIR=$(DIR_SYSCONF) \
				LOCALSTATEDIR=$(DIR_LOCALSTATE) \
			$(MAKE) purge debug test ; \
	fi

include $(DIR_ROOT)/_aux/mk/f0_deps.mk

# vim:ts=2
