# $Id$
#
#---        `yaal' (c) 1978 by Marcin 'Amok' Konarski             ---
#
#	Makefile.mk - this file is integral part of `yaal' project.
#
#	i.  You may not make any changes in Copyright information.
#	ii. You must attach Copyright information to any part of every copy
#	    of this software.
#
#Copyright:
#
# You are free to use this program as is, you can redistribute binary
# package freely but:
#  1. You cannot use any part of sources of this software.
#  2. You cannot redistribute any part of sources of this software.
#  3. No reverse engineering is allowed.
#  4. If you want redistribute binary package you cannot demand any fees
#     for this software.
#     You cannot even demand cost of the carrier (CD for example).
#  5. You cannot include it to any commercial enterprise (for example 
#     as a free add-on to payed software or payed newspaper).
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. Use it at your own risk.
$(foreach DIR,$(subst /, ,$(CURDIR)), $(eval $(eval DIR_ROOT_TEST=$(DIR_ROOT_TEST)/$(DIR)) $(if $(wildcard $(DIR_ROOT_TEST)/Makefile.mk.in),export DIR_ROOT ?= $(DIR_ROOT_TEST))))
VERSION				= 0
SUBVERSION		= 0
EXTRAVERSION	= 17
COMPONENTS		= hcore tools dbwrapper hconsole hdata
DRIVERS				= @DO_ORACLE_DRIVER@ @DO_MYSQL_DRIVER@ @DO_POSTGRESQL_DRIVER@ @DO_SQLITE3_DRIVER@
DIR_TARGET		= $(HOME)/usr/lib
DIR_HEADERS		= $(HOME)/usr/include/yaal/
DIRS					= $(DIR_TARGET) $(DIR_HEADERS) $(DIR_BUILD)
HAPI_HEADER		= $(DIR_HEADERS)/yaal.hxx
LD_SO_CONF			= $(DIR_TARGET)/ld.so.conf
LIB_PREFIX = @LIB_PREFIX@
ifeq ($(LIB_PREFIX),lib)
LIB_SUFFIX = so.$(RELEASE)
LIB_ARCHIVE_SUFFIX = a
else
LIB_SUFFIX = dll
LIB_ARCHIVE_SUFFIX = dll.a
endif
CTAGS	= @CTAGS@
GITID = @GITID@
include $(DIR_ROOT)/_aux/mk/1_basic.mk
include $(DIR_ROOT)/_aux/mk/2_term.mk
include $(DIR_ROOT)/_aux/mk/3_suffix.mk
include $(DIR_ROOT)/_aux/mk/4_wrapper.mk
include $(DIR_ROOT)/_aux/mk/5_flags.mk
CXXFLAGS+= -D__YAAL_BUILD__ @EXTRA_CXXFLAGS@ @DEFS@ \
					-I$(DIR_ROOT) -I$(DIR_BUILD) -I/usr/local/include \
					@EXTRA_INCLUDE_PATHS@
LXXFLAGS+= -L. -L$(DIR_TARGET) -L/usr/local/lib @EXTRA_LIB_PATHS@ -shared @EXTRA_LXXFLAGS@ @YAAL_LXXFLAGS@

include $(DIR_ROOT)/_aux/mk/7_func.mk

$(foreach IT,$(COMPONENTS),$(eval $(call PREPARE_VARIABLES,$(IT))))
SRCS := $(filter-out %_driver.$(SS),$(SRCS))
OBJS_dbwrapper := $(filter-out %_driver.$(OS),$(OBJS_dbwrapper))
$(foreach IT,$(DRIVERS),$(eval $(call CONFIGURE_DRIVER,$(IT))))

LIBS_hcore			=	"-lpthread -lssl -lcrypto @HCORE_LIBS@"
DEPS_tools			= $(TARGET_hcore)
LIBS_tools			= "-lhcore -lpthread -lxml2 -lxslt @RDYNAMIC@ @HCORE_LIBS@ @TOOLS_LIBS@ @HCORE_LIBS@"
DEPS_dbwrapper	= $(TARGET_hcore) $(TARGET_tools)
LIBS_dbwrapper	= "-ltools -lhcore @HCORE_LIBS@"
DEPS_hconsole		= $(TARGET_hcore) $(TARGET_tools)
LIBS_hconsole		= "-ltools -lhcore -lncurses @HCONSOLE_LIBS@ @HCORE_LIBS@"
DEPS_hdata			= $(TARGET_dbwrapper) $(TARGET_hconsole)
LIBS_hdata			= "-lhconsole -ldbwrapper -ltools -lhcore -lncurses @HCORE_LIBS@"

DEPS_sqlite3		= $(TARGET_hcore)
LIBS_sqlite3		= "-lsqlite3 -lhcore"
DEPS_mysql			= $(TARGET_hcore)
LIBS_mysql			= "-lmysqlclient -lhcore"
DEPS_postgresql	= $(TARGET_hcore)
LIBS_postgresql	= "-lpq -lhcore"
DEPS_oracle			= $(TARGET_hcore)
LIBS_oracle			= "-lclntsh -lhcore"

-include $(DIR_ROOT)/local.mk

#-------------------------------------------------------------------

#	this is "rule" for linking libs

$(LIB_PREFIX)%.$(LIB_SUFFIX):
	@if [ "x$(NAME)" = "x" ] ; then printf "%b\n" "Do not use this directive externally !"; exit 1; fi; \
	$(call msg,printf "%b" "Linking \`$(@) ... $(BOLD)$(RED)";) \
	$(call invoke,$(LXX) $(LIBS) $(LXXFLAGS) @SONAME_FLAG@ -o $(@) \
			@START_GROUP@ $(OBJS_$(NAME)) @END_GROUP@ $(LIBS) 2>&1 | tee -a make.log;) $(call msg, printf "%b" "$(RS)";)
	@test -f $(@) || exit 1
ifeq ($(LIB_PREFIX),lib)
	@$(AR) $(ARFLAGS) lib$(NAME).$(LIB_ARCHIVE_SUFFIX) $(OBJS_$(NAME)) 2>&1 | grep -v '^ar: creating ' | tee -a make.log;
endif
	@/bin/mv -f $(@) lib$(NAME).$(LIB_ARCHIVE_SUFFIX) $(DIR_TARGET)/; $(call msg,printf "%b" "making cache ... ";)
ifeq ($(LIB_PREFIX),lib)
	@cd $(DIR_TARGET) && $(DIR_TARGET)/mkcache && \
	ln -sf lib$(NAME).so.$(RELEASE) lib$(NAME).so.$(VERSION).$(SUBVERSION) && \
	ln -sf lib$(NAME).so.$(VERSION).$(SUBVERSION) lib$(NAME).so.$(VERSION) && \
	ln -sf lib$(NAME).so.$(VERSION) lib$(NAME).so
endif
	@$(call msg,printf "%b$(NL)" "done.$(CL)")

include $(DIR_ROOT)/_aux/mk/b_implicit-compile.mk
#------------------------------------------------------------------------

include $(DIR_ROOT)/_aux/mk/c_target-default.mk

#phony targets
.PHONY: all bin clean clean-dep cov debug dep doc install install-environment mrproper release prof purge static stats tags 
.NOTPARALLEL: $(HAPI_HEADER) $(LD_SO_CONF)

all debug release cov prof: environment $(TARGETS) $(HAPI_HEADER)

$(foreach IT,$(DIRS),$(eval $(call MAKE_DIR,$(IT))))
$(foreach IT,$(COMPONENTS),$(eval $(call BUILD_TARGET_LIB,$(IT),$(DEPS_$(IT)),$(LIBS_$(IT)))))
$(foreach IT,$(DRIVERS),$(eval $(call BUILD_TARGET_LIB,$(IT)_driver,$(DEPS_$(IT)),$(LIBS_$(IT)))))

environment: $(DIRS) $(LD_SO_CONF)

install-environment:
	@./_aux/msh

$(HAPI_HEADER): $(HDRS) $(DIR_HEADERS)
	@printf "%b" "Making headers ... "; \
	env DIR_ROOT="$(DIR_ROOT)" DIR_BUILD="$(DIR_BUILD)" DIR_HEADERS="$(DIR_HEADERS)" HDRS="$(HDRS)" $(DIR_ROOT)/_aux/mkheaders; \
	printf "%b$(NL)" "done.$(CL)$(BOLD)"; \
	printf "%b\n" "All OK!$(RS)";

$(LD_SO_CONF): $(DIR_ROOT)/_aux/mkcache
	@printf "%b" "Making environment ... "; \
	printf "%b\n" $(DIR_TARGET) > $(DIR_TARGET)/ld.so.conf; \
	/bin/cp -f $(DIR_ROOT)/_aux/mkcache $(DIR_TARGET); \
	printf "%b$(NL)" "done.$(CL)"

clean-dep:
	@$(FIND) . -name '*.$(DS)' | xargs /bin/rm -f

clean: clean-dep
	@/bin/rm -f $(OBJS); \
	sh -c '. $(DIR_ROOT)/_aux/clean-lib.sh && clean .'

mrproper: clean
	@printf "%b" "Purging ... "; \
	/bin/rm -rf $(DIR_TARGET) $(DIR_HEADERS) make.log; \
	$(FIND) . \( -name .git -prune -name 'tags' -or -name '.depend' -or -name '*.a' \) -a ! -name .git \
| xargs /bin/rm -f; \
	printf "%b\n" "done."

include $(DIR_ROOT)/_aux/mk/d_target-tags.mk

doc: $(SRCS) $(HDRS)
	@doxygen _aux/doxygenrc 2>&1 | grep 'is not documented'; \
	cat doc/doxygen.css >> doc/html/doxygen.css

stats:
	@cd $(DIR_ROOT) && ./_aux/stats $(DIR_ROOT)

flint:
	@flint -b _aux/flint.lnt hcore/*.$(SS) hconsole/*.$(SS) tools/*.$(SS) \
						dbwrapper/db_driver_loader.$(SS) dbwrapper/dbwrapper.$(SS) \
						dbwrapper/hdatabase.$(SS) dbwrapper/hrecordset.$(SS) \
						hdata/*.$(SS) \
| awk '{gsub(" \\(compare with line [^)]+\\)","");print}'|head -20

include $(DIR_ROOT)/_aux/mk/e_deps.mk

# vim:ts=2
