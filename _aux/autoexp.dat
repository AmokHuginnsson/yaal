[Visualizer]
yaal::hcore::HString {
	preview ( 
		#if ( ($c._mem[((sizeof(int*))*3)-1]&128) ) (
		 #( [(*(char**)($c._mem)),s] )
		)
		#else (
		 #( [$c._mem,s] )
		)
	)
	stringview (
		#if ( ($c._mem[((sizeof(int*))*3)-1]&128) ) (
		 #( [(*(char**)($c._mem)),s] )
		)
		#else (
		 #( [$c._mem,s] )
		)
	)
	children ( #( [raw members]: [$c,!] ) )
}
yaal::hcore::HArray<*,*> {
	preview ( #( "[", $c._size, "](",
			#array (
				expr:	$c._buf[$i],
				size: $c._size
			),
		" )"
	) )
	children (
		#(
			[raw members]: [$c,!],
			#array (
				expr:	$c._buf[$i],
				size: $c._size
			)
		)
	)
}
yaal::hcore::HDeque<*,*> {
	preview (
		#if ( ( 512 - ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) ) > ( sizeof ( $T1 ) / 2 ) ) (
			#if ( ( ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) + sizeof ( $T1 ) ) > sizeof ( $T1 ) ) (
				#( "{ _size = ", $c._size, ", _start = ", $c._start, ", VALUES_PER_CHUNK = ", ( ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) + sizeof ( $T1 ) ) / sizeof ( $T1 ), " }" )
			) #else (
				#( "{ _size = ", $c._size, ", _start = ", $c._start, ", VALUES_PER_CHUNK = 1 }" )
			)
		) #else (
			#if ( ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) > sizeof ( $T1 ) ) (
				#( "{ _size = ", $c._size, ", _start = ", $c._start, ", VALUES_PER_CHUNK = ",  ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) / sizeof ( $T1 ), " }" )
			) #else (
				#( "{ _size = ", $c._size, ", _start = ", $c._start, ", VALUES_PER_CHUNK = 1 }" )
			)
		)
	)
	children (
		#(
			[raw members]: [$c,!],
			#if ( ( 512 - ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) ) > ( sizeof ( $T1 ) / 2 ) ) (
				#if ( ( ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) + sizeof ( $T1 ) ) > sizeof ( $T1 ) ) (
					#array (
						expr: (($T1**)($c._chunks._data))[ ( $i + $c._start ) / ( ( ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) + sizeof ( $T1 ) ) / sizeof ( $T1 ) ) ][ ( $i + $c._start ) % ( ( ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) + sizeof ( $T1 ) ) / sizeof ( $T1 ) ) ],
						size: $c._size
					)
				) #else (
					#array (
						expr: (($T1**)($c._chunks._data))[ $i + $c._start ][ 0 ],
						size: $c._size
					)
				)
			) #else (
				#if ( ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) > sizeof ( $T1 ) ) (
					#array (
						expr: (($T1**)($c._chunks._data))[ ( $i + $c._start ) / ( ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) / sizeof ( $T1 ) ) ][ ( $i + $c._start ) % ( ( ( 512 / sizeof ( $T1 ) ) * sizeof ( $T1 ) ) / sizeof ( $T1 ) ) ],
						size: $c._size
					)
				) #else (
					#array (
						expr: (($T1**)($c._chunks._data))[ $i + $c._start ][ 0 ],
						size: $c._size
					)
				)
			)
		)
	)
}
yaal::hcore::HList<*,*> {
	preview (
		#(
			"[", $c._size, "](",
			#list (
				head: $c._hook,
				next: _next
			) : $e._value, ")"
		)
	)
	children (
		#(
			[raw members]: [$c,!],
			#list (
				head: $c._hook,
				next: _next
			) : $e._value
		)
	)
}
yaal::hcore::HSet<*,*,*> {
	preview (
		#( "[", $c._engine._size, "](",
			#tree (
				head: $c._engine._root,
				left: _left,
				right: _right,
				size: $c._engine._size
			) : ((yaal::hcore::HSBBSTree<$T1,$T2,yaal::hcore::set_helper<$T1>,$T3>::HNode*)&$e)->_key, ")"
		)
	)
	children (
		#(
			[raw members]: [$c,!],
			#tree (
				head: $c._engine._root,
				left: _left,
				right: _right,
				size: $c._engine._size
			) : ((yaal::hcore::HSBBSTree<$T1,$T2,yaal::hcore::set_helper<$T1>,$T3>::HNode*)&$e)->_key
		)
	)
}
yaal::hcore::HHashSet<*,*,*> {
	children (
		#(
			[raw members]: [$c,!],
			#array (
				expr: &((yaal::hcore::HHashContainer<$T1,$T2,yaal::hcore::hashset_helper<$T1>,$T3>::HAtom**)($c._engine._buckets._data))[$i],
				size: $c._engine._buckets._size / sizeof ( $T1* )
			) : #(
				#list (
					head: $e,
					next: _next
				) : ((yaal::hcore::HHashContainer<$T1,$T2,yaal::hcore::hashset_helper<$T1>,$T3>::HAtom*)&$e)->_value
			)
		)
	)
}
yaal::tools::HRing<*> {
	preview (
		#(
			"[", $c._size, ",", ( $c._buf._size / sizeof ( $T1 ) ), "](",
			#array (
				expr:	(($T1*)($c._buf._data))[($i + $c._start) % ( $c._buf._size / sizeof ( $T1 ) )],
				size: $c._size
			), ")"
		)
	)
	children (
		#(
			[raw members]: [$c,!],
			#array (
				expr:	(($T1*)($c._buf._data))[($i + $c._start) % ( $c._buf._size / sizeof ( $T1 ) )],
				size: $c._size
			)
		)
	)
}
yaal::hcore::HNumber {
	preview (
		#(
			#if ( $c._negative ) (
				"-"
			),
			#array (
				expr: ((char*)($c._canonical._data))[$i],
				size: $c._digitCount
			) : [$e,i]
		)
	)
}

