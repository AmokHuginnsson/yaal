cmake_minimum_required( VERSION 2.6 )
project( yaal )
set( COMPONENTS hcore tools dbwrapper hconsole hdata )
get_filename_component( yaal_SOURCE_DIR ${yaal_SOURCE_DIR}/../ ABSOLUTE )
message( "yaal_SOURCE_DIR: " ${yaal_SOURCE_DIR} )
include_directories( "${yaal_SOURCE_DIR}" )
add_definitions( -D__YAAL_BUILD__ -D__ID__="" )

if ( CMAKE_HOST_WIN32 )
	set( LIB_PREFIX "\"\"" )
	set( LIB_EXT "\"dll\"" )
	set( SYMBOL_PREFIX "\"\"" )
else ( CMAKE_HOST_WIN32 )
	set( LIB_PREFIX "\"lib\"" )
	set( LIB_EXT "\"so\"" )
	set( SYMBOL_PREFIX "\"\"" )
endif ( CMAKE_HOST_WIN32 )
include( CheckFunctionExists )
check_function_exists( strcasestr HAVE_STRCASESTR )
check_function_exists( asprintf HAVE_ASPRINTF )
include( CheckIncludeFileCXX )
check_include_file_cxx( sqlite3.h HAVE_SQLITE3_H )
check_include_file_cxx( postgresql/libpq-fe.h HAVE_POSTGRESQL_LIBPQ_FE_H )
check_include_file_cxx( libpq-fe.h HAVE_LIBPQ_FE_H )
check_include_file_cxx( mysql/mysql.h HAVE_MYSQL_MYSQL_H )
check_include_file_cxx( oci.h HAVE_OCI_H )
set( CMAKE_REQUIRED_INCLUDES_ORIG ${CMAKE_REQUIRED_INCLUDES} )
set( CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES} "/usr/include/libxml2" )
check_include_file_cxx( libxml2/libxml/xmlversion.h HAVE_LIBXML2_LIBXML_XMLVERSION_H )
set( CMAKE_REQUIRED_INCLUDES ${CMAKE_REQUIRED_INCLUDES_ORIG} )
check_include_file_cxx( openssl/ssl.h HAVE_OPENSSL_SSL_H )
check_include_file_cxx( execinfo.h HAVE_EXECINFO_H )
check_include_file_cxx( sys/consio.h HAVE_SYS_CONSIO_H )
check_include_file_cxx( gpm.h HAVE_GPM_H )
check_include_file_cxx( ncurses/curses.h HAVE_NCURSES_CURSES_H )
check_include_file_cxx( curses.h HAVE_CURSES_H )
configure_file( ${yaal_SOURCE_DIR}/_aux/config.hxx.cmake config.hxx )

macro( yaal_make_component name )
	message( "Processing component: " ${name} )
	file( GLOB SRCS ${yaal_SOURCE_DIR}/${name}/*.cxx )
	add_library( ${name} SHARED ${SRCS} )
	set_target_properties( ${name} PROPERTIES LINKER_LANGUAGE CXX )
endmacro( yaal_make_component )

foreach( COMPONENT ${COMPONENTS} )
	yaal_make_component( "${COMPONENT}" )
endforeach( COMPONENT )
