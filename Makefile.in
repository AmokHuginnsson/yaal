# $CVSHeader$
#
#---        `stdhapi' 0.0.0 (c) 1978 by Marcin 'Amok' Konarski             ---
#
#	Makefile - this file is integral part of `stdhapi' project.
#
#	i.  You may not make any changes in Copyright information.
#	ii. You must attach Copyright information to any part of every copy
#	    of this software.
#
#Copyright:
#
# You are free to use this program as is, you can redistribute binary
# package freely but:
#  1. You can not use any part of sources of this software.
#  2. You can not redistribute any part of sources of this software.
#  3. No reverse engineering is allowed.
#  4. If you want redistribute binary package you can not demand any fees
#     for this software.
#     You can not even demand cost of the carrier (CD for example).
#  5. You can not include it to any commercial enterprise (for example 
#     as a free add-on to payed software or payed newspaper).
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. Use it at your own risk.

VERSION = 0
SUBVERSION = 0
EXTRAVERSION = 0
RELEASE = $(VERSION).$(SUBVERSION).$(EXTRAVERSION)
SHELL = /bin/sh
TARGETDIR = $(HOME)/lib
HEADERSDIR = $(HOME)/prog/include
HAPIHDR = $(HEADERSDIR)/stdhapi.h
CACHE = $(TARGETDIR)/ld.so.cache
HCOREDIR = ./hcore/
HCONSOLEDIR = ./hconsole/
TOOLSDIR = ./tools/
DBWRAPPERDIR = ./dbwrapper/
HDATADIR = ./hdata/
HCORE = $(TARGETDIR)/libhcore.so.$(RELEASE)
HCONSOLE = $(TARGETDIR)/libhconsole.so.$(RELEASE)
TOOLS = $(TARGETDIR)/libtools.so.$(RELEASE)
MYSQL_DRIVER = $(TARGETDIR)/libmysql_driver.so.$(RELEASE)
POSTGRESQL_DRIVER = $(TARGETDIR)/libpostgresql_driver.so.$(RELEASE)
SQLITE_DRIVER = $(TARGETDIR)/libsqlite_driver.so.$(RELEASE)
SQLITE3_DRIVER = $(TARGETDIR)/libsqlite3_driver.so.$(RELEASE)
DBWRAPPER = $(TARGETDIR)/libdbwrapper.so.$(RELEASE)
HDATA = $(TARGETDIR)/libhdata.so.$(RELEASE)
HS = .h
SS = .c
OS = .o
CTAGS = @CTAGS@
FIND = find
.SUFFIXES:
.SUFFIXES: $(SS) $(OS) $(HS)
CXX = g++
LXX = g++
ARFLAGS = r
CWARNING_FLAGS =	\
						@PEDANTIC_ERRORS@\
						@EXTRA_WARNINGS@\
						-Wall\
						-Wcast-align\
						-Wcast-qual\
						-Wconversion\
						-Wendif-labels\
						-Werror\
						-Winline\
						-Wlarger-than-4096\
						-Wlong-long\
						-Wmissing-noreturn\
						-Wpointer-arith\
						-Wredundant-decls\
						@WARN_SHADOW@\
						-Wsign-compare\
						-Wundef\
						-Wwrite-strings
#						-Wbad-function-cast\
						-Wmissing-declarations\
						-Wmissing-prototypes\
						-Wnested-externs\
						-Wstrict-prototypes\
						-Wtraditional\ #C only
#						-Wmissing-format-attribute\
						-Wunreachable-code\ # too much warrnings
#						-Waggregate-return\ # useless for C++
CXXWARNING_FLAGS =	\
						-Weffc++\
						-Wsign-promo
#						-Wold-style-cast\ # lots of warrnings from libc headers
#						-Woverloaded-virtual\ # too much unecessary warrnings
ifeq ($(HD),1)
	DB = -D__DEBUGGER_BABUNI__
endif
COMPILER_PRIME_FLAGS = -fmessage-length=0 -std=gnu++98 -pipe -fPIC -D__STDHAPI_BUILD__ -D_GNU_SOURCE @DEFS@ -march=i486
ifdef NODEBUG
	COMPILER_OPTIMIZATION_FLAGS = -O3 -fexpensive-optimizations
else
	COMPILER_DEBUG_FLAGS = -g -g3 -ggdb -ggdb3 -gstabs+ -pg -fno-inline -D__DEBUG__ $(DB)
endif
COMPILER_PATH_FLAGS = -I. -I/usr/local/include
# -fno-external-templates #deprecated
LINKER_PATH_FLAGS = -L. -L$(TARGETDIR) -L/usr/local/lib @EXTRA_LIB_PATHS@
LINKER_PRIME_FLAGS =	\
								-shared\
								@SPECIAL_LINKER_FLAGS@\
								-Wl,--fatal-warnings\
								-Wl,--demangle\
								-Wl,--export-dynamic\
								-Wl,-soname,
CXXFLAGS = $(CWARNING_FLAGS) $(CXXWARNING_FLAGS) $(COMPILER_OPTIMIZATION_FLAGS) $(COMPILER_DEBUG_FLAGS) $(COMPILER_PATH_FLAGS) $(COMPILER_PRIME_FLAGS)
LINKER_FLAGS = $(LINKER_PATH_FLAGS) $(LINKER_PRIME_FLAGS)

#	h-core
SRC4hcore = $(strip $(sort $(shell $(FIND) $(HCOREDIR) -name '*.c')))
HDR4hcore = $(strip $(sort $(shell $(FIND) $(HCOREDIR) -name '*.h')))
OBJ4hcore := $(SRC4hcore:.c=.o)
SRCS := $(SRC4hcore)

#	h-console
SRC4hconsole = $(strip $(sort $(shell $(FIND) $(HCONSOLEDIR) -name '*.c')))
HDR4hconsole = $(strip $(sort $(shell $(FIND) $(HCONSOLEDIR) -name '*.h')))
OBJ4hconsole := $(SRC4hconsole:.c=.o)
SRCS += $(SRC4hconsole)

# tools
SRC4tools = $(strip $(sort $(shell $(FIND) $(TOOLSDIR) -name '*.c')))
HDR4tools = $(strip $(sort $(shell $(FIND) $(TOOLSDIR) -name '*.h')))
OBJ4tools := $(SRC4tools:.c=.o)
SRCS += $(SRC4tools)

# dbwrapper
SRC4dbwrapper = $(strip $(sort $(shell $(FIND) $(DBWRAPPERDIR) -name '*.c' -a ! -name '*_driver.c')))
HDR4dbwrapper = $(strip $(sort $(shell $(FIND) $(DBWRAPPERDIR) -name '*.h')))
OBJ4dbwrapper := $(SRC4dbwrapper:.c=.o)
SRCS += $(SRC4dbwrapper)
ifneq ("@TARGET_MYSQL_DRIVER@","") # MYSQL_DRIVER
	OBJ4mysql_driver = 
	OBJ4mysql_driver += mysql_driver
endif # MYSQL_DRIVER
ifneq ("@TARGET_POSTGRESQL_DRIVER@","") # POSTGRESQL_DRIVER
	OBJ4postgresql_driver = 
	OBJ4postgresql_driver += postgresql_driver
endif # POSTGRESQL_DRIVER
ifneq ("@TARGET_SQLITE_DRIVER@","") # SQLITE_DRIVER
	OBJ4sqlite_driver = 
	OBJ4sqlite_driver += sqlite_driver
endif # SQLITE_DRIVER
ifneq ("@TARGET_SQLITE3_DRIVER@","") # SQLITE3_DRIVER
	OBJ4sqlite3_driver = 
	OBJ4sqlite3_driver += sqlite3_driver
endif # SQLITE3_DRIVER

#	h-data
SRC4hdata = $(strip $(sort $(shell $(FIND) $(HDATADIR) -name '*.c')))
HDR4hdata = $(strip $(sort $(shell $(FIND) $(HDATADIR) -name '*.h')))
OBJ4hdata := $(SRC4hdata:.c=.o)
SRCS += $(SRC4hdata)

ifneq ("@TARGET_MYSQL_DRIVER@","") # MYSQL_DRIVER
	OBJ4mysql_driver := $(strip $(OBJ4mysql_driver))
	OBJ4mysql_driver := $(patsubst %,$(DBWRAPPERDIR)%.o, $(OBJ4mysql_driver))
endif # MYSQL_DRIVER
ifneq ("@TARGET_POSTGRESQL_DRIVER@","") # POSTGRESQL_DRIVER
	OBJ4postgresql_driver := $(strip $(OBJ4postgresql_driver))
	OBJ4postgresql_driver := $(patsubst %,$(DBWRAPPERDIR)%.o, $(OBJ4postgresql_driver))
endif
ifneq ("@TARGET_SQLITE_DRIVER@","") # SQLITE_DRIVER
	OBJ4sqlite_driver := $(strip $(OBJ4sqlite_driver))
	OBJ4sqlite_driver := $(patsubst %,$(DBWRAPPERDIR)%.o, $(OBJ4sqlite_driver))
endif # SQLITE_DRIVER
ifneq ("@TARGET_SQLITE3_DRIVER@","") # SQLITE3_DRIVER
	OBJ4sqlite3_driver := $(strip $(OBJ4sqlite3_driver))
	OBJ4sqlite3_driver := $(patsubst %,$(DBWRAPPERDIR)%.o, $(OBJ4sqlite3_driver))
endif # SQLITE3_DRIVER

ifneq ("@TARGET_MYSQL_DRIVER@","") # MYSQL_DRIVER
	SRCS += $(patsubst %.o,%.c, $(OBJ4mysql_driver))
endif # MYSQL_DRIVER
ifneq ("@TARGET_POSTGRESQL_DRIVER@","") # POSTGRESQL_DRIVER
	SRCS += $(patsubst %.o,%.c, $(OBJ4postgresql_driver))
endif # POSTGRESQL_DRIVER
ifneq ("@TARGET_SQLITE_DRIVER@","") # SQLITE_DRIVER
	SRCS += $(patsubst %.o,%.c, $(OBJ4sqlite_driver))
endif # SQLITE_DRIVER
ifneq ("@TARGET_SQLITE3_DRIVER@","") # SQLITE3_DRIVER
	SRCS += $(patsubst %.o,%.c, $(OBJ4sqlite3_driver))
endif # SQLITE3_DRIVER

#-------------------------------------------------------------------

DEPS=$(subst ~, -MT ,$(join $(patsubst %.c,"%.c~", $(sort $(SRCS))),$(sort $(patsubst %.c,%.o,$(SRCS)))))

# implict pattern rule
	
%.o : %.c
	@echo -n "Compiling \`$@' ... "
	@tput bold
	@tput setaf 1
	@$(CXX) $(CXXFLAGS) $< -c -o $@ 2>&1 | tee -a make.log
	@tput sgr0
	@echo -ne "done.\r"
	@tput el

#	this is "rule" for linking libs

$(TARGET):
	@if [ "$(TARGET)" = "" -o "$(NAME)" = "" ] ; then echo "Do not use this directive externally !"; exit 1; fi
	@echo -n "Linking \`$@ ... "
	@tput bold
	@tput setaf 1
	@$(LXX) $(LIBS) $(LINKER_FLAGS)lib$(NAME).so.$(VERSION).$(SUBVERSION) -o lib$(NAME).so.$(RELEASE) -Wl,--entry="stdhapi_$(NAME)_main" -Wl,-\( $(OBJ4$(NAME)) -Wl,-\) 2>&1 | tee -a make.log
	@tput sgr0
	@$(AR) $(ARFLAGS) lib$(NAME).a $(OBJ4$(NAME)) 2>&1 | grep -v '^ar: creating ' | tee -a make.log
	@/bin/mv -f lib$(NAME).so.$(RELEASE) $(TARGETDIR)/
	@/bin/mv -f lib$(NAME).a $(TARGETDIR)/
	@echo -n "making cache ... "
	@(cd $(TARGETDIR);/bin/rm -f lib$(NAME).so.$(VERSION).$(SUBVERSION) lib$(NAME).so.$(VERSION) lib$(NAME).so;$(TARGETDIR)/mkcache;ln -sf lib$(NAME).so.$(RELEASE) lib$(NAME).so.$(VERSION).$(SUBVERSION);ln -s lib$(NAME).so.$(VERSION).$(SUBVERSION) lib$(NAME).so.$(VERSION);ln -s lib$(NAME).so.$(VERSION) lib$(NAME).so)
	@echo -ne "done.\r"
	@tput el

#-------------------------------------------------------------------

.DEFAULT:
	@echo "Lack of \`$<'." | tee -a make.log

#phony targets
.PHONY: all nodebug install dep clean tags mrproper purge

all: $(HAPIHDR) .depend $(CACHE) $(HCORE) $(HCONSOLE) $(TOOLS) @TARGET_MYSQL_DRIVER@ @TARGET_POSTGRESQL_DRIVER@ @TARGET_SQLITE_DRIVER@ @TARGET_SQLITE3_DRIVER@ $(DBWRAPPER) $(HDATA)

nodebug:
	@( export NODEBUG="yes";\
	$(MAKE) -e all)

install: all
	@./aux/msh

$(HCORE): $(OBJ4hcore)
	@$(MAKE) $(HCORE)\' TARGET=$(HCORE)\' NAME=hcore LIBS="@GETTEXT_LIB@"

$(HCONSOLE): $(HCORE) $(OBJ4hconsole)
	@$(MAKE) $(HCONSOLE)\' TARGET=$(HCONSOLE)\' NAME=hconsole LIBS="-lncurses @MOUSE_LIB@ -lhcore"
	
$(TOOLS): $(HCONSOLE) $(OBJ4tools)
	@$(MAKE) $(TOOLS)\' TARGET=$(TOOLS)\' NAME=tools LIBS="-lncurses -lhcore -lhconsole"

# dbwrapper BEGIN
$(DBWRAPPER) : $(HCORE) $(OBJ4dbwrapper)
	@$(MAKE) $(DBWRAPPER)\' TARGET=$(DBWRAPPER)\' NAME=dbwrapper LIBS="-rdynamic @DLOPEN_IN@ -lhcore -lhconsole -ltools"

$(MYSQL_DRIVER): $(HCORE) $(OBJ4mysql_driver) $(DBWRAPPER)
	@$(MAKE) $(MYSQL_DRIVER)\' TARGET=$(MYSQL_DRIVER)\' NAME=mysql_driver LIBS="-lmysqlclient -lhcore"

$(POSTGRESQL_DRIVER): $(HCORE) $(OBJ4postgresql_driver)
	@$(MAKE) $(POSTGRESQL_DRIVER)\' TARGET=$(POSTGRESQL_DRIVER)\' NAME=postgresql_driver LIBS="-lpq -lhcore"
	
$(SQLITE_DRIVER): $(HCORE) $(OBJ4sqlite_driver)
	@$(MAKE) $(SQLITE_DRIVER)\' TARGET=$(SQLITE_DRIVER)\' NAME=sqlite_driver LIBS="-lsqlite -lhcore"

$(SQLITE3_DRIVER): $(HCORE) $(OBJ4sqlite3_driver)
	@$(MAKE) $(SQLITE3_DRIVER)\' TARGET=$(SQLITE3_DRIVER)\' NAME=sqlite3_driver LIBS="-lsqlite3 -lhcore"
# dbwrapper END

$(HDATA): $(HCONSOLE) $(OBJ4hdata)
	@$(MAKE) $(HDATA)\' TARGET=$(HDATA)\' NAME=hdata LIBS="-lncurses -lhcore -lhconsole -ldbwrapper"

$(HAPIHDR): $(HDR4hcore) $(HDR4hconsole) $(HDR4tools) $(HDR4dbwrapper) $(HDR4hdata)
	@echo -n "Making header dir ... "
	@/bin/mkdir -p $(HEADERSDIR)
	@for FILE in $(HDR4hcore) $(HDR4hconsole) $(HDR4tools) $(HDR4dbwrapper) $(HDR4hdata); do \
		awk '/^#include "/ {match($$0,"[a-z_]+\\.h"); printf "#include <%s>\n", substr($$0,RSTART,RLENGTH) };!/^#include "/' $$FILE > $(HEADERSDIR)/`basename $$FILE`;\
	done
	@head -26 $(HEADERSDIR)/bit.h | sed -e s/bit/stdhapi/ > $(HEADERSDIR)/stdhapi.h
	@echo '#ifndef __STDHAPI_H' >> $(HEADERSDIR)/stdhapi.h
	@echo '#define __STDHAPI_H' >> $(HEADERSDIR)/stdhapi.h
	@echo '' >> $(HEADERSDIR)/stdhapi.h
	@cat config.h >> $(HEADERSDIR)/stdhapi.h
	@find $(HEADERSDIR) ! -name 'stdhapi.h' -type f | awk '{printf "#include <%s>\n", substr ($$1,match($$1,"[a-z_]+.h$$"),99)}' | sort >> $(HEADERSDIR)/stdhapi.h
	@echo '' >> $(HEADERSDIR)/stdhapi.h
	@echo '#endif /* not __STDHAPI_H */' >> $(HEADERSDIR)/stdhapi.h
	@echo "done."

$(CACHE):
	@echo -n "Making environment ... "
	@/bin/mkdir -p $(TARGETDIR)
	@echo $(TARGETDIR) > $(TARGETDIR)/ld.so.conf
	@/bin/cp -f ./aux/mkcache $(TARGETDIR)
	@echo "done."

dep: .depend
.depend: $(SRCS) $(HDR4hcore) $(HDR4hconsole) $(HDR4tools) $(HDR4dbwrapper) $(HDR4hdata)
	@echo -n 'Making dependicies ... '
	@set -e; for DEP in $(DEPS); do $(CXX) $(CXXFLAGS) -MM $${DEP} ; done > .depend
	@echo "# vim:ft=make:" >> .depend
	@/bin/rm -f make.log
	@echo 'done.'

clean:
	@/bin/rm -f $(OBJ4hcore) $(OBJ4hconsole) $(OBJ4tools) $(OBJ4dbwrapper) $(OBJ4hdata)
	@cln .

tags: $(SRCS) $(HDR4hcore) $(HDR4hconsole) $(HDR4tools) $(HDR4dbwrapper) $(HDR4hdata)
	@echo -n "Rehashing tags ... "
	@$(CTAGS) -R --langmap="c:,c++:.h.c" -h ".h" --languages="c++" --c++-kinds="+p+x" --format=2 --fields="afikKlmnsSz" --extra="+f+q"
	@echo "done."

mrproper: clean
	@echo -n "Purging ... "
	@/bin/rm -rf $(TARGETDIR) $(HEADERSDIR) make.log
	@find . -name 'tags' -or -name '.depend' -or -name '*.a'| xargs /bin/rm -f
	@echo "done."

purge: mrproper
	/bin/rm -rf autom4te.cache configure config.cache config.log config.status configure.lineno
	/bin/rm -rf Makefile config.h stdhapirc

ifneq ($(wildcard .depend),)
include .depend
endif

