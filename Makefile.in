# $CVSHeader$
#
#---        `stdhapi' 0.0.0 (c) 1978 by Marcin 'Amok' Konarski             ---
#
#	Makefile - this file is integral part of `stdhapi' project.
#
#	i.  You may not make any changes in Copyright information.
#	ii. You must attach Copyright information to any part of every copy
#	    of this software.
#
#Copyright:
#
# You are free to use this program as is, you can redistribute binary
# package freely but:
#  1. You can not use any part of sources of this software.
#  2. You can not redistribute any part of sources of this software.
#  3. No reverse engineering is allowed.
#  4. If you want redistribute binary package you can not demand any fees
#     for this software.
#     You can not even demand cost of the carrier (CD for example).
#  5. You can not include it to any commercial enterprise (for example 
#     as a free add-on to payed software or payed newspaper).
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. Use it at your own risk.

SHELL					= /bin/sh
VERSION				= 0
SUBVERSION		= 0
EXTRAVERSION	= 0
RELEASE				= $(VERSION).$(SUBVERSION).$(EXTRAVERSION)
COMPONENTS		= hcore hconsole tools dbwrapper hdata
DRIVERS				= @DO_ORACLE_DRIVER@ @DO_MYSQL_DRIVER@ @DO_POSTGRESQL_DRIVER@ @DO_SQLITE_DRIVER@ @DO_SQLITE3_DRIVER@
export DIR_ROOT	?= $(CURDIR)
DIR_TARGET		= $(HOME)/lib
DIR_HEADERS		= $(HOME)/prog/include
DIR_BUILD			= $(DIR_ROOT)/build
VPATH					= $(DIR_ROOT)
DIRS					= $(DIR_TARGET) $(DIR_HEADERS) $(DIR_BUILD)
HAPI_HEADER		= $(DIR_HEADERS)/stdhapi.h
LD_CACHE			= $(DIR_TARGET)/ld.so.cache
ifdef TERM
CL						:= $(shell tput cr;tput dl1)
BOLD					:= $(shell tput bold || tput md)
RED						:= $(shell tput setaf 1 || tput AF 1)
RS						:= $(shell tput sgr0 || tput me)
NONL					:= "-n"
endif
HS = .h
SS = .c
OS = .o
CTAGS	= @CTAGS@
FIND	= find
.SUFFIXES:
.SUFFIXES: $(SS) $(OS) $(HS)
CXX ?= g++
CXX := $(subst -x c++ -x c++,-x c++,$(subst colorgcc,colorgcc -x c++,$(CXX)))
DXX ?= $(CXX)
DXX := $(subst -x c++,,$(subst colorg,g,$(DXX)))
LXX ?= g++
ARFLAGS = r
CWARNING_FLAGS =	\
						@PEDANTIC_ERRORS@\
						@EXTRA_WARNINGS@\
						-Wall\
						-Wcast-align\
						-Wcast-qual\
						-Wconversion\
						-Wendif-labels\
						-Werror\
						-Winline\
						-Wlarger-than-4096\
						-Wlong-long\
						-Wmissing-noreturn\
						-Wpointer-arith\
						-Wredundant-decls\
						@WARN_SHADOW@\
						-Wsign-compare\
						-Wundef\
						-Wwrite-strings
#						-Wbad-function-cast\
						-Wmissing-declarations\
						-Wmissing-prototypes\
						-Wnested-externs\
						-Wstrict-prototypes\
						-Wtraditional\ #C only
#						-Wmissing-format-attribute\
						-Wunreachable-code\ # too much warrnings
#						-Waggregate-return\ # useless for C++
CXXWARNING_FLAGS		=	\
						-Weffc++\
						-Wsign-promo
#						-Wold-style-cast\ # lots of warrnings from libc headers
#						-Woverloaded-virtual\ # too much unecessary warrnings
ifeq ($(HD),1)
	DB = -D__DEBUGGER_BABUNI__
endif
COMPILER_PRIME_FLAGS					= -fmessage-length=0 -std=gnu++98 -pipe -fPIC \
																-D__STDHAPI_BUILD__ -D_GNU_SOURCE \
																@DEFS@ -march=i486
ifdef NODEBUG
	COMPILER_OPTIMIZATION_FLAGS = -O3 -fexpensive-optimizations
else
	COMPILER_DEBUG_FLAGS				= -g -g3 -ggdb -ggdb3 -gstabs+ -pg -fno-inline \
																-D__DEBUG__ $(DB)
endif
COMPILER_PATH_FLAGS						= -I$(DIR_ROOT) -I/usr/local/include \
																@EXTRA_INCLUDE_PATHS@
# -fno-external-templates #deprecated
LINKER_PATH_FLAGS							= -L. -L$(DIR_TARGET) -L/usr/local/lib \
																@EXTRA_LIB_PATHS@
LINKER_PRIME_FLAGS						=	\
								-shared\
								@SPECIAL_LINKER_FLAGS@\
								-Wl,--fatal-warnings\
								-Wl,--demangle\
								-Wl,--export-dynamic\
								-Wl,-soname,
CXXFLAGS			= $(CWARNING_FLAGS) $(CXXWARNING_FLAGS) \
								$(COMPILER_OPTIMIZATION_FLAGS) $(COMPILER_DEBUG_FLAGS) \
								$(COMPILER_PATH_FLAGS) $(COMPILER_PRIME_FLAGS)
LINKER_FLAGS	= $(LINKER_PATH_FLAGS) $(LINKER_PRIME_FLAGS)

define PREPARE_VARIABLES
	DIR_$(1) := ./$(1)/
	DIRS += $$(DIR_BUILD)/$$(DIR_$(1))
ifeq ($(CURDIR),$(DIR_BUILD))
	SONAME_$(1) := lib$(1).so.$$(VERSION).$$(SUBVERSION)
	TARGET_$(1) := $$(DIR_TARGET)/lib$(1).so.$$(RELEASE)
	TARGETS += $$(TARGET_$(1))
	HDRS += $$(strip $$(sort $$(shell cd $$(DIR_ROOT) && $$(FIND) $$(DIR_$(1)) -name "*.h")))
	SRC_$(1) = $$(strip $$(sort $$(shell cd $$(DIR_ROOT) && $$(FIND) $$(DIR_$(1)) -name "*.c")))
	SRCS += $$(SRC_$(1))
	OBJS_$(1) := $$(patsubst %.c,%.o,$$(SRC_$(1)))
	OBJS += $$(OBJS_$(1))
endif
endef

define CONFIGURE_DRIVER
	SONAME_$(1) := lib$(1)_driver.so.$$(VERSION).$$(SUBVERSION)
	TARGET_$(1)_driver := $$(DIR_TARGET)/lib$(1)_driver.so.$$(RELEASE)
	TARGETS += $$(TARGET_$(1)_driver)
	OBJS_$(1)_driver := $(1)_driver
	SRCS += $$(patsubst %,$$(DIR_ROOT)/$$(DIR_dbwrapper)/%.c,$$(OBJS_$(1)_driver))
	OBJS_$(1)_driver := $$(patsubst %,$$(DIR_dbwrapper)%.o, $$(OBJS_$(1)_driver))
	OBJS += $$(OBJS_$(1))
endef

define MAKE_DIR
$(1):
	@/bin/mkdir -p $(1)
endef

define BUILD_TARGET
$$(TARGET_$(1)): $$(OBJS_$(1)) $(2)
	@$$(MAKE) -f ../Makefile --no-print-directory lib$(1).so.$$(RELEASE) NAME=$(1) LIBS=$(3)
endef

$(foreach COMPONENT,$(COMPONENTS),$(eval $(call PREPARE_VARIABLES,$(COMPONENT))))
SRCS := $(filter-out %_driver.c,$(SRCS))
OBJS_dbwrapper := $(filter-out %_driver.o,$(OBJS_dbwrapper))
$(foreach DRIVER,$(DRIVERS),$(eval $(call CONFIGURE_DRIVER,$(DRIVER))))

LIBS_hcore			=	"-lpthread @GETTEXT_LIB@"
DEPS_hconsole		= $(TARGET_hcore)
LIBS_hconsole		= "-lncurses @MOUSE_LIB@ -lhcore"
DEPS_tools			= $(TARGET_hconsole)
LIBS_tools			= "-lxml2 -lncurses -lhcore -lhconsole"
DEPS_dbwrapper	= $(TARGET_hcore)
LIBS_dbwrapper	= "-rdynamic @DLOPEN_IN@ -lhcore -lhconsole -ltools"
DEPS_hdata			= $(TARGET_dbwrapper) $(TARGET_hconsole)
LIBS_hdata			= "-lncurses -lhcore -lhconsole -ltools -ldbwrapper"

DEPS_sqlite3		= $(TARGET_hcore)
LIBS_sqlite3		= "-lsqlite3 -lhcore"
DEPS_sqlite			= $(TARGET_hcore)
LIBS_sqlite			= "-lsqlite -lhcore"
DEPS_mysql			= $(TARGET_hcore)
LIBS_mysql			= "-lmysqlclient -lhcore"
DEPS_postgresql	= $(TARGET_hcore)
LIBS_postgresql	= "-lpq -lhcore"
DEPS_oracle			= $(TARGET_hcore)
LIBS_oracle			= "-lclntsh -lhcore"

#-------------------------------------------------------------------

# implict pattern rule
	
%.o: %.c
	@echo -n "Compiling \`$(subst $(DIR_ROOT)/,,$(<))' ... "; \
	echo -n "$(@:.o=.d) " > $(@:.o=.d); \
	$(DXX) $(CXXFLAGS) -MM $(<) -MT $(@) | grep -v '^#' >> $(@:.o=.d); \
	$(CXX) $(CXXFLAGS) $(<) -c -o $(@) 2>&1 | tee -a make.log; \
	echo $(NONL) "done.$(CL)"

#	this is "rule" for linking libs

lib%.so.$(RELEASE):
	@if [ "$(NAME)" = "" ] ; then echo "Do not use this directive externally !"; exit 1; fi; \
	echo -n "Linking \`$(@) ... $(BOLD)$(RED)"; \
	$(LXX) $(LIBS) $(LINKER_FLAGS)$(SONAME_$(NAME)) -o $(@) \
			-Wl,--entry="stdhapi_$(NAME)_main" \
			-Wl,-\( $(OBJS_$(NAME)) -Wl,-\) 2>&1 | tee -a make.log; echo -n $(RS); \
	if [ -f $(@) ] ; then \
	$(AR) $(ARFLAGS) lib$(NAME).a $(OBJS_$(NAME)) 2>&1 \
| grep -v '^ar: creating ' | tee -a make.log; \
	/bin/mv -f $(@) lib$(NAME).a $(DIR_TARGET)/; echo -n "making cache ... "; \
	cd $(DIR_TARGET); $(DIR_TARGET)/mkcache; \
	ln -sf lib$(NAME).so.$(RELEASE) lib$(NAME).so.$(VERSION).$(SUBVERSION); \
	ln -sf lib$(NAME).so.$(VERSION).$(SUBVERSION) lib$(NAME).so.$(VERSION); \
	ln -sf lib$(NAME).so.$(VERSION) lib$(NAME).so; \
	else exit 1; fi; echo $(NONL) "done.$(CL)"

#-------------------------------------------------------------------

.DEFAULT:
	@if [ "$(suffix $(<))" != ".d" ] ; then \
	echo -n "$(BOLD)$(RED)"; \
	echo "Lack of \`$(<)'." | tee -a make.log; \
	echo -n $(RS); fi

#phony targets
.PHONY: all nodebug install dep clean tags stats mrproper purge environment

ifneq ($(CURDIR),$(DIR_BUILD))
all: environment
	@$(MAKE) --no-print-directory -C $(DIR_BUILD) -f ../Makefile
else
all: $(TARGETS) $(HAPI_HEADER)
endif

$(foreach COMPONENT,$(COMPONENTS),$(eval $(call BUILD_TARGET,$(COMPONENT),$(DEPS_$(COMPONENT)),$(LIBS_$(COMPONENT)))))
$(foreach DRIVER,$(DRIVERS),$(eval $(call BUILD_TARGET,$(DRIVER)_driver,$(DEPS_$(DRIVER)),$(LIBS_$(DRIVER)))))
$(foreach DIR,$(DIRS),$(eval $(call MAKE_DIR,$(DIR))))

environment: $(DIRS) $(LD_CACHE)

nodebug:
	export NODEBUG="yes"; \
	$(MAKE) -e all

install: all
	@./aux/msh

$(HAPI_HEADER): $(HDRS) $(DIR_HEADERS)
	@cd $(DIR_ROOT); echo -n "Making headers ... "; \
	for FILE in $(HDRS); do \
		awk '/^#include "/ {match($$0,"[a-z_]+\\.h"); \
		printf "#include <%s>\n", substr($$0,RSTART,RLENGTH) }; \
		!/^#include "/' $$FILE > $(DIR_HEADERS)/`basename $$FILE`; \
	done; \
	head -26 $(DIR_HEADERS)/bit.h \
| sed -e s/bit/stdhapi/ > $(DIR_HEADERS)/stdhapi.h; \
	echo '#ifndef __STDHAPI_H' >> $(DIR_HEADERS)/stdhapi.h; \
	echo '#define __STDHAPI_H' >> $(DIR_HEADERS)/stdhapi.h; \
	echo '' >> $(DIR_HEADERS)/stdhapi.h; \
	cat config.h >> $(DIR_HEADERS)/stdhapi.h; \
	find $(DIR_HEADERS) ! -name 'stdhapi.h' -type f \
| awk '{printf "#include <%s>\n", substr ($$1,match($$1,"[a-z_]+.h$$"),99)}' \
| sort >> $(DIR_HEADERS)/stdhapi.h; \
	echo '' >> $(DIR_HEADERS)/stdhapi.h; \
	echo '#endif /* not __STDHAPI_H */' >> $(DIR_HEADERS)/stdhapi.h; \
	echo $(NONL) "done.$(CL)$(BOLD)"; \
	echo "All OK!$(RS)";

$(LD_CACHE):
	@echo -n "Making environment ... "; \
	echo $(DIR_TARGET) > $(DIR_TARGET)/ld.so.conf; \
	/bin/cp -f ./aux/mkcache $(DIR_TARGET); \
	echo $(NONL) "done.$(CL)"

clean-dep:
	@$(FIND) . -name '*.d' | xargs /bin/rm -f

clean: clean-dep
	@/bin/rm -f $(OBJS); \
	cln .

mrproper: clean
	@echo -n "Purging ... "; \
	/bin/rm -rf $(DIR_TARGET) $(DIR_HEADERS) $(DIR_BUILD) make.log; \
	$(FIND) . -name 'tags' -or -name '.depend' -or -name '*.a' \
| xargs /bin/rm -f; \
	echo "done."

purge: mrproper
	/bin/rm -rf autom4te.cache config.cache config.status configure.lineno; \
	/bin/rm -rf configure Makefile config.h stdhapirc config.log doc/dox

tags: $(SRCS) $(HDRS)
	@echo -n "Rehashing tags ... "; \
	$(CTAGS)	-R --langmap="c:,c++:.h.c" -h ".h" --languages="c++" \
						--c++-kinds="+p+x" --format=2 --fields="afikKlmnsSz" \
						--extra="+f+q"; \
	echo "done."

stats:
	@aux/stats

flint:
	@flint -b aux/flint.lnt hcore/*.c hconsole/*.c tools/*.c \
						dbwrapper/db_driver_loader.c dbwrapper/dbwrapper.c \
						dbwrapper/hdatabase.c dbwrapper/hrecordset.c \
						hdata/*.c \
| awk '{gsub(" \\(compare with line [^)]+\\)","");print}'|head -20

ifeq ($(CURDIR),$(DIR_BUILD))
-include $(OBJS:.o=.d)
endif

# vim:ts=2
