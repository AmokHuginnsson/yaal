# $Id$
#
#---        `yaal' (c) 1978 by Marcin 'Amok' Konarski             ---
#
#	Makefile - this file is integral part of `yaal' project.
#
#	i.  You may not make any changes in Copyright information.
#	ii. You must attach Copyright information to any part of every copy
#	    of this software.
#
#Copyright:
#
# You are free to use this program as is, you can redistribute binary
# package freely but:
#  1. You can not use any part of sources of this software.
#  2. You can not redistribute any part of sources of this software.
#  3. No reverse engineering is allowed.
#  4. If you want redistribute binary package you can not demand any fees
#     for this software.
#     You can not even demand cost of the carrier (CD for example).
#  5. You can not include it to any commercial enterprise (for example 
#     as a free add-on to payed software or payed newspaper).
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. Use it at your own risk.

export DIR_ROOT	?= $(CURDIR)
VERSION				= 0
SUBVERSION		= 0
EXTRAVERSION	= 12
COMPONENTS		= hcore tools dbwrapper hconsole hdata
DRIVERS				= @DO_ORACLE_DRIVER@ @DO_MYSQL_DRIVER@ @DO_POSTGRESQL_DRIVER@ @DO_SQLITE_DRIVER@ @DO_SQLITE3_DRIVER@
DIR_TARGET		= $(HOME)/usr/lib
DIR_HEADERS		= $(HOME)/usr/include/yaal/
VPATH					= $(DIR_ROOT)
DIRS					= $(DIR_TARGET) $(DIR_HEADERS) $(DIR_BUILD)
HAPI_HEADER		= $(DIR_HEADERS)/yaal.h
LD_CACHE			= $(DIR_TARGET)/ld.so.cache
CTAGS	= @CTAGS@
GITID = @GITID@
include $(DIR_ROOT)/_aux/common-basic.mk
include $(DIR_ROOT)/_aux/common-term.mk
include $(DIR_ROOT)/_aux/common-suffix.mk
include $(DIR_ROOT)/_aux/common-wrapper.mk
include $(DIR_ROOT)/_aux/common-flags.mk
CWARNING_FLAGS								+= @PEDANTIC_ERRORS@ @EXTRA_WARNINGS@ @WARN_SHADOW@
COMPILER_PRIME_FLAGS					+= -D__YAAL_BUILD__ -fPIC @DEFS@
COMPILER_PATH_FLAGS						= -I$(DIR_ROOT) -I/usr/local/include \
																@EXTRA_INCLUDE_PATHS@
LINKER_PATH_FLAGS							= -L. -L$(DIR_TARGET) -L/usr/local/lib \
																@EXTRA_LIB_PATHS@

# WARNING!! -Wl,soname, must be last option, and last character of it,
# meaning "," must be immediately followed by end of line
LINKER_PRIME_FLAGS +=	-shared\
								-Wl,--export-dynamic\
								@SPECIAL_LINKER_FLAGS@\
								-Wl,-soname,

include $(DIR_ROOT)/_aux/common-flags-post.mk
include $(DIR_ROOT)/_aux/common-func.mk

$(foreach IT,$(COMPONENTS),$(eval $(call PREPARE_VARIABLES,$(IT))))
SRCS := $(filter-out %_driver.$(SS),$(SRCS))
OBJS_dbwrapper := $(filter-out %_driver.$(OS),$(OBJS_dbwrapper))
$(foreach IT,$(DRIVERS),$(eval $(call CONFIGURE_DRIVER,$(IT))))

LIBS_hcore			=	"-lrt -lpthread -lssl @GETTEXT_LIB@"
DEPS_tools			= $(TARGET_hcore)
LIBS_tools			= "-rdynamic -lxml2 -lxslt -lhcore @DLOPEN_IN@"
DEPS_hconsole		= $(TARGET_hcore) $(TARGET_tools)
LIBS_hconsole		= "-lncurses @MOUSE_LIB@ -lhcore -ltools"
DEPS_dbwrapper	= $(TARGET_hcore) $(TARGET_tools)
LIBS_dbwrapper	= "-lhcore -ltools"
DEPS_hdata			= $(TARGET_dbwrapper) $(TARGET_hconsole)
LIBS_hdata			= "-lncurses -lhcore -ltools -ldbwrapper -lhconsole"

DEPS_sqlite3		= $(TARGET_hcore)
LIBS_sqlite3		= "-lsqlite3 -lhcore"
DEPS_sqlite			= $(TARGET_hcore)
LIBS_sqlite			= "-lsqlite -lhcore"
DEPS_mysql			= $(TARGET_hcore)
LIBS_mysql			= "-lmysqlclient -lhcore"
DEPS_postgresql	= $(TARGET_hcore)
LIBS_postgresql	= "-lpq -lhcore"
DEPS_oracle			= $(TARGET_hcore)
LIBS_oracle			= "-lclntsh -lhcore"

#-------------------------------------------------------------------

#	this is "rule" for linking libs

lib%.so.$(RELEASE):
	@if [ "$(NAME)" = "" ] ; then echo "Do not use this directive externally !"; exit 1; fi; \
	echo -n "Linking \`$(@) ... $(BOLD)$(RED)"; \
	$(LXX) $(LIBS) $(LINKER_FLAGS)$(SONAME_$(NAME)) -o $(@) \
			-Wl,--entry="yaal_$(NAME)_main" \
			-Wl,-\( $(OBJS_$(NAME)) -Wl,-\) 2>&1 | tee -a make.log; echo -n $(RS); \
	if [ -f $(@) ] ; then \
	$(AR) $(ARFLAGS) lib$(NAME).a $(OBJS_$(NAME)) 2>&1 \
| grep -v '^ar: creating ' | tee -a make.log; \
	/bin/mv -f $(@) lib$(NAME).a $(DIR_TARGET)/; echo -n "making cache ... "; \
	cd $(DIR_TARGET); $(DIR_TARGET)/mkcache; \
	ln -sf lib$(NAME).so.$(RELEASE) lib$(NAME).so.$(VERSION).$(SUBVERSION); \
	ln -sf lib$(NAME).so.$(VERSION).$(SUBVERSION) lib$(NAME).so.$(VERSION); \
	ln -sf lib$(NAME).so.$(VERSION) lib$(NAME).so; \
	else exit 1; fi; echo $(NONL) "done.$(CL)"

include $(DIR_ROOT)/_aux/common-implicit-compile.mk
#------------------------------------------------------------------------

include $(DIR_ROOT)/_aux/common-target-default.mk

#phony targets
.PHONY: all nodebug prof cov install dep clean tags stats mrproper purge environment doc

ifneq ($(CURDIR),$(DIR_BUILD))
all: environment
	@test -t 1 && export TERMINAL="TERM" ; \
	$(MAKE) --no-print-directory -C $(DIR_BUILD) -f ../Makefile
else
all: $(TARGETS) $(HAPI_HEADER)
endif

$(foreach IT,$(COMPONENTS),$(eval $(call BUILD_TARGET_LIB,$(IT),$(DEPS_$(IT)),$(LIBS_$(IT)))))
$(foreach IT,$(DRIVERS),$(eval $(call BUILD_TARGET_LIB,$(IT)_driver,$(DEPS_$(IT)),$(LIBS_$(IT)))))
$(foreach IT,$(DIRS),$(eval $(call MAKE_DIR,$(IT))))

environment: $(DIRS) $(LD_CACHE)

nodebug:
	NODEBUG="yes" $(MAKE) -e all

prof:
	DO_PROFILING=1 $(MAKE) -e all

cov:
	DO_COVERAGE=1 $(MAKE) -e all

install: all
	@./_aux/msh

$(HAPI_HEADER): $(HDRS) $(DIR_HEADERS)
	@umask 022;cd $(DIR_ROOT); echo -n "Making headers ... "; \
	for FILE in $(HDRS); do \
		mkdir -p $(DIR_HEADERS)/`dirname $$FILE` ; \
		awk '/^#include "/ {match($$0,"\"[a-z_./-]+"); \
		printf "#include <yaal/%s>\n", substr($$0,RSTART+1,RLENGTH-1) }; \
		!/^#include "/' $$FILE > $(DIR_HEADERS)/$$FILE; \
	done; \
	head -26 $(DIR_HEADERS)/hcore/base.h \
| sed -e s/bit/yaal/ > $(DIR_HEADERS)/yaal.h; \
	echo '#ifndef __YAAL_H' >> $(DIR_HEADERS)/yaal.h; \
	echo '#define __YAAL_H' >> $(DIR_HEADERS)/yaal.h; \
	echo '' >> $(DIR_HEADERS)/yaal.h; \
	cat config.h >> $(DIR_HEADERS)/yaal.h; \
	find $(DIR_HEADERS) ! -name 'yaal.h' -type f \
| awk '{printf "#include <%s>\n", substr ($$1,match($$1,"yaal"),255)}' \
| sort >> $(DIR_HEADERS)/yaal.h; \
	echo '' >> $(DIR_HEADERS)/yaal.h; \
	echo '#endif /* not __YAAL_H */' >> $(DIR_HEADERS)/yaal.h; \
	echo $(NONL) "done.$(CL)$(BOLD)"; \
	echo "All OK!$(RS)";

$(LD_CACHE):
	@echo -n "Making environment ... "; \
	echo $(DIR_TARGET) > $(DIR_TARGET)/ld.so.conf; \
	/bin/cp -f ./_aux/mkcache $(DIR_TARGET); \
	echo $(NONL) "done.$(CL)"

clean-dep:
	@$(FIND) . -name '*.$(DS)' | xargs /bin/rm -f

clean: clean-dep
	@/bin/rm -f $(OBJS); \
	cln .

mrproper: clean
	@echo -n "Purging ... "; \
	/bin/rm -rf $(DIR_TARGET) $(DIR_HEADERS) $(DIR_BUILD) make.log; \
	$(FIND) . \( -name .git -prune -name 'tags' -or -name '.depend' -or -name '*.a' \) -a ! -name .git \
| xargs /bin/rm -f; \
	echo "done."

purge: mrproper
	/bin/rm -rf autom4te.cache config.cache config.status configure.lineno; \
	/bin/rm -rf configure Makefile config.h config.h.in yaalrc config.log doc/dox

include $(DIR_ROOT)/_aux/common-target-tags.mk

doc: $(SRCS) $(HDRS)
	@doxygen _aux/doxygenrc

stats:
	@_aux/stats

flint:
	@flint -b _aux/flint.lnt hcore/*.$(SS) hconsole/*.$(SS) tools/*.$(SS) \
						dbwrapper/db_driver_loader.$(SS) dbwrapper/dbwrapper.$(SS) \
						dbwrapper/hdatabase.$(SS) dbwrapper/hrecordset.$(SS) \
						hdata/*.$(SS) \
| awk '{gsub(" \\(compare with line [^)]+\\)","");print}'|head -20

ifeq ($(CURDIR),$(DIR_BUILD))
-include $(OBJS:.$(OS)=.$(DS))
endif

# vim:ts=2
